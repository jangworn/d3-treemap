(window.webpackJsonp=window.webpackJsonp||[]).push([["theme"],{"./app/theme.js":
/*!**********************!*\
  !*** ./app/theme.js ***!
  \**********************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('__webpack_require__(/*! ../assets/css/style.css */ "./assets/css/style.css");\n__webpack_require__(/*! ../assets/js/graph */ "./assets/js/graph.js");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdGhlbWUuanM/MzgwMiJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQSxtQkFBQUEsQ0FBUSx1REFBUjtBQUNBLG1CQUFBQSxDQUFRLGdEQUFSIiwiZmlsZSI6Ii4vYXBwL3RoZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIi4uL2Fzc2V0cy9jc3Mvc3R5bGUuY3NzXCIpO1xucmVxdWlyZShcIi4uL2Fzc2V0cy9qcy9ncmFwaFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/theme.js\n')},"./assets/css/style.css":
/*!******************************!*\
  !*** ./assets/css/style.css ***!
  \******************************/
/*! no static exports found */function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL3N0eWxlLmNzcz8xYjhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vYXNzZXRzL2Nzcy9zdHlsZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/css/style.css\n")},"./assets/js/graph.js":
/*!****************************!*\
  !*** ./assets/js/graph.js ***!
  \****************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {\nvar width = $(document).width();\nvar height = $(document).height();\n\nvar tree;\nvar container;\nvar linkContainer;\nvar zoom;\nvar diagonal;\nvar rootData;\nvar nodes;\nvar links;\nvar isExtent = false;\nvar id = 0;\nvar opts = {\n    url: "./test.json", //数据\n    watermark_text: \'人物\', //水印\n    backound_color: \'#ffffff\', //背景色\n    colors: [\'#007bff\', \'#28a745\', \'#ffc107\', \'#6c757d\'] //节点颜色，按照数据category可以显示不同颜色\n};\nvar timer = 0;\n$(window).resize(function () {\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n        window.location.reload();\n    }, 200);\n});\n$(document).ready(function () {\n    getData();\n\n    $(\'#button_box a.download\').off(\'click\').on(\'click\', function () {\n        download(\'png\');\n    });\n    $(\'#button_box a.refresh\').off(\'click\').on(\'click\', function () {\n        window.location.reload();\n    });\n\n    function download() {\n        var svg = d3.select("svg");\n        var serializer = new XMLSerializer();\n        var source = serializer.serializeToString(svg.node());\n\n        source = \'<?xml version="1.0" standalone="no"?>\\r\\n\' + source;\n        var url = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(source);\n\n        var canvas = document.createElement("canvas");\n        canvas.width = 1000;\n        canvas.height = 800;\n\n        var context = canvas.getContext("2d");\n        var image = new Image();\n        image.src = url;\n        context.fillStyle = opts.backound_color;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        image.onload = function () {\n            context.drawImage(image, 0, 0);\n            var a = document.createElement("a");\n            a.download = "tree.jpg";\n            a.href = canvas.toDataURL("image/jpg");\n            a.click();\n        };\n        return false;\n    }\n});\n\nfunction getData() {\n    $.ajax({\n        url: opts.url,\n        type: \'GET\',\n        data: {},\n        dataType: \'JSON\',\n        success: function (data) {\n            if (data.Status === 200) {\n                $(\'#load_data p\').html(\'loading...\');\n                rootData = data.Result.Node;\n                traverseTreeId(rootData);\n                draw(rootData);\n                $(\'#load_data\').hide();\n            } else {\n                $(\'#load_data p\').html(\'无数据\');\n            }\n        }\n    });\n}\n\nfunction draw(root) {\n    tree = d3.layout.cluster().size([360, 500]).separation(function (a, b) {\n        return (a.parent == b.parent ? 1 : 2) / a.depth;\n    });\n\n    var svg = d3.select("svg");\n    $("svg").empty();\n\n    svg.attr("width", width);\n    svg.attr("height", height);\n    drawWaterMark(svg);\n\n    container = svg.append("g");\n    linkContainer = container.append("g");\n    zoom = d3.behavior.zoom().scaleExtent([0.2, 4]).on("zoom", zoomed);\n    diagonal = d3.svg.diagonal.radial().projection(function (d) {\n        return [d.y, d.x / 180 * Math.PI];\n    });\n\n    svg.call(zoom).on(\'dblclick.zoom\', null);\n\n    initLocation();\n\n    function zoomed() {\n        container.attr("transform", "translate(" + zoom.translate() + ")" + "scale(" + zoom.scale() + ")");\n    }\n\n    function interpolateZoom(translate, scale) {\n        var self = this;\n        return d3.transition().duration(350).tween("zoom", function () {\n            var iTranslate = d3.interpolate(zoom.translate(), translate),\n                iScale = d3.interpolate(zoom.scale(), scale);\n            return function (t) {\n                zoom.scale(iScale(t)).translate(iTranslate(t));\n                zoomed();\n            };\n        });\n    }\n\n    function zoomClick() {\n        var clicked = d3.event.target,\n            direction = 1,\n            factor = 0.2,\n            target_zoom = 1,\n            center = [width / 2, height / 2],\n            extent = zoom.scaleExtent(),\n            translate = zoom.translate(),\n            translate0 = [],\n            l = [],\n            view = { x: translate[0], y: translate[1], k: zoom.scale() };\n\n        d3.event.preventDefault();\n\n        direction = this.id === \'zoom-in\' ? 1 : -1;\n        target_zoom = zoom.scale() * (1 + factor * direction);\n\n        if (target_zoom < extent[0] || target_zoom > extent[1]) {\n            return false;\n        }\n\n        translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];\n        view.k = target_zoom;\n        l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];\n\n        view.x += center[0] - l[0];\n        view.y += center[1] - l[1];\n\n        interpolateZoom([view.x, view.y], view.k);\n    }\n    d3.selectAll(\'#zoom-in\').on(\'click\', zoomClick);\n    d3.selectAll(\'#zoom-out\').on(\'click\', zoomClick);\n\n    function initLocation() {\n        zoom.translate([width / 2, height / 2]);\n        zoom.scale(0.5);\n        container.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + zoom.scale() + ")");\n    }\n\n    nodes = tree.nodes(root);\n    links = tree.links(nodes);\n\n    nodes.forEach(function (d) {\n        if (d.depth > 1) {\n            if (d.children) {\n                d._children = d.children;\n                d.children = null;\n            }\n        }\n    });\n\n    root.x0 = 0;\n    root.y0 = 0;\n    drawTree(root);\n}\n\nfunction drawTree(data, hiddentype) {\n    nodes = tree.nodes(rootData);\n    links = tree.links(nodes);\n\n    nodes.forEach(function (d) {\n        if (d.depth > 2) {\n            d.y = d.depth * (d.depth / 2) * 150;\n        } else {\n            d.y = d.depth * 150;\n        }\n    });\n    var maxDepth = 1;\n    for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].depth > maxDepth) {\n            maxDepth = nodes[i].depth;\n        }\n    }\n\n    var linkUpdate = linkContainer.selectAll(".link").data(links, function (d) {\n        if (hiddentype) {\n            if (hiddentype.human) {\n                if (d.target.type == \'human\' || d.source.type == \'human\') {\n                    return 1;\n                }\n            }\n            if (hiddentype.listed) {\n                if (d.source.depth > 0) {\n                    if (d.target.type == \'listed\' || d.source.type == \'listed\') {\n                        return 1;\n                    }\n                }\n            }\n            if (hiddentype.nonlisted) {\n                if (d.source.depth > 0) {\n                    if (d.target.type == \'nonlisted\' || d.source.type == \'nonlisted\') {\n\n                        return 1;\n                    }\n                }\n            }\n        }\n\n        return d.target.id;\n    });\n    var linkEnter = linkUpdate.enter();\n    var linkExit = linkUpdate.exit();\n\n    linkEnter.append("path").attr("class", "link").attr("style", "fill: none; stroke-opacity: 1;stroke-width: 1.5px;").attr("d", function (d) {\n        var o = {\n            x: data.x0,\n            y: data.y0\n        };\n        return diagonal({\n            source: o,\n            target: o\n        });\n    }).transition().duration(500).attr("d", diagonal);\n\n    linkUpdate.attr("stroke", function (d) {\n        var index = opts.colors[d.target.Category];\n        console.log(index);\n        if (index) {\n            return index;\n        } else {\n            return opts.colors[0];\n        }\n    }).transition().duration(500).attr("d", diagonal);\n\n    linkExit.transition().duration(500).attr("d", function (d) {\n        var o = {\n            x: data.x,\n            y: data.y\n        };\n        return diagonal({\n            source: o,\n            target: o\n        });\n    }).remove();\n\n    var nodeUpdate = container.selectAll(".node").data(nodes, function (d) {\n        if (hiddentype) {\n            if (hiddentype.human) {\n                if (d.type == \'human\') {\n                    return 0;\n                }\n            }\n            if (hiddentype.listed) {\n                if (d.type == \'listed\' && d.depth > 1) {\n                    return 0;\n                }\n                if (d.depth > 2 && d.parent.type == \'listed\') {\n                    return 0;\n                }\n            }\n            if (hiddentype.nonlisted) {\n                if (d.type == \'nonlisted\') {\n                    if (d.name != \'客户\' && d.name != \'供应商\' && d.name != \'股东\' && d.name != \'董监高\') {\n                        return 0;\n                    }\n                }\n                if (d.depth > 2 && d.parent.type == \'nonlisted\') {\n                    return 0;\n                }\n            }\n        }\n        return d.id;\n    });\n\n    var nodeEnter = nodeUpdate.enter();\n    var nodeExit = nodeUpdate.exit();\n    var enterNodes = nodeEnter.append("g").attr("class", function (d) {\n        return "node";\n    }).attr("transform", function (d) {\n        return "translate(" + project(data.x0, data.y0) + ")";\n    });\n    enterNodes.append("circle").attr("r", 0).attr("fill", function (d) {\n        var index = opts.colors[d.Category];\n        console.log(index);\n        if (index) {\n            return index;\n        } else {\n            return opts.colors[0];\n        }\n    }).attr("stroke", function (d) {\n\n        var index = opts.colors[d.Category];\n        console.log(index);\n        if (index) {\n            return index;\n        } else {\n            return opts.colors[0];\n        }\n    }).attr("stroke-opacity", 0.5).attr("stroke-width", function (d) {\n        if (d.depth == 0) {\n            return 10;\n        }\n\n        if (d.depth == 1) {\n            return 6;\n        }\n\n        return 0;\n    }).on("click", function (d) {\n        if (d.depth > 0) {\n            toggle(d);\n            drawTree(d);\n        } else {}\n        console.log(d);\n    });\n\n    enterNodes.append("path").attr("d", function (d) {\n        if (d.depth > 0 && d._children) {\n            return "M-6 -1 H-1 V-6 H1 V-1 H6 V1 H1 V6 H-1 V1 H-6 Z";\n        } else if (d.depth > 0 && d.children) {\n            return "M-6 -1 H6 V1 H-6 Z";\n        }\n    }).attr("fill", "#ffffff").attr("stroke", "#ffffff").attr("stroke-width", "0.2").on("click", function (d) {\n        if (d.depth > 0) {\n            toggle(d);\n            drawTree(d);\n        }\n        console.log(d);\n    });\n    enterNodes.append("text").attr("dy", function (d) {\n        if (d.depth == 0) {\n            return "-1.5em";\n        }\n        return "0.31em";\n    }).attr("x", function (d) {\n        if (d.depth == 0) {\n            return d.name.length * 8;\n        }\n        return d.x < 180 ? 15 : -15;\n    }).text(function (d) {\n        return d.name;\n    }).style("text-anchor", function (d) {\n        if (d.depth == 0) {\n            return "end";\n        }\n        return d.x < 180 ? "start" : "end";\n    }).style("fill-opacity", 0).attr("transform", function (d) {\n        if (d.depth > 0) {\n            return "rotate(" + (d.x < 180 ? d.x - 90 : d.x + 90) + ")";\n        } else {\n            return "rotate(0)";\n        }\n    }).style("font-size", function (d) {\n        if (d.depth == 0) {\n            return "16px";\n        }\n        return "14px";\n    }).attr("fill", function (d) {\n        var index = opts.colors[d.Category];\n        console.log(index);\n        if (index) {\n            return index;\n        } else {\n            return opts.colors[0];\n        }\n    }).on("dblclick", function (d) {\n        console.log("duble click：" + d.name);\n    }).on(\'click\', function (d) {\n        //console.log(d);\n    });\n\n    var updateNodes = nodeUpdate.transition().duration(500).attr("transform", function (d) {\n        return "translate(" + project(d.x, d.y) + ")";\n    });\n    updateNodes.select("text").style("fill-opacity", 1).attr("transform", function (d) {\n        if (d.depth > 0) {\n            return "rotate(" + (d.x < 180 ? d.x - 90 : d.x + 90) + ")";\n        } else {\n            return "rotate(0)";\n        }\n    }).attr("x", function (d) {\n        if (d.depth == 0) {\n            return d.name.length * 8;\n        }\n        return d.x < 180 ? 15 : -15;\n    }).attr("fill", function (d) {\n        var index = opts.colors[d.Category];\n        console.log(index);\n        if (index) {\n            return index;\n        } else {\n            return opts.colors[0];\n        }\n    }).style("text-anchor", function (d) {\n        if (d.depth == 0) {\n            return "end";\n        }\n        return d.x < 180 ? "start" : "end";\n    });\n    updateNodes.select("circle").attr("r", function (d) {\n        if (d.depth == 0) {\n            return 12;\n        }\n\n        if (d.depth == 1) {\n            return 10;\n        }\n\n        return 9;\n    });\n    updateNodes.select("path").attr("d", function (d) {\n        if (d.depth > 0 && d._children) {\n            return "M-6 -1 H-1 V-6 H1 V-1 H6 V1 H1 V6 H-1 V1 H-6 Z";\n        } else if (d.depth > 0 && d.children) {\n            return "M-6 -1 H6 V1 H-6 Z";\n        }\n    });\n\n    var exitNodes = nodeExit.transition().duration(500).attr("transform", function (d) {\n        return "translate(" + project(data.x, data.y) + ")";\n    }).remove();\n    exitNodes.select("circle").attr("r", 0);\n\n    exitNodes.select("text").style("fill-opacity", 0);\n\n    nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n    });\n}\n\nfunction toggle(d) {\n    if (d.children) {\n        d._children = d.children;\n        d.children = null;\n    } else {\n        d.children = d._children;\n        d._children = null;\n    }\n}\n\nfunction project(x, y) {\n    var angle = (x - 90) / 180 * Math.PI,\n        radius = y;\n    return [radius * Math.cos(angle), radius * Math.sin(angle)];\n}\n\nfunction drawWaterMark(svg) {\n\n    var text_width = $(window).width() - 20;\n    var row = Math.ceil(opts.watermark_text.length / Math.floor(text_width / 12));\n    var declare = svg.append("g").attr("transform", "translate(" + ($(window).width() - opts.watermark_text.length * 12) / 2 + "," + ($(window).height() - 100) + ")");\n    for (var i = 0; i < row; i++) {\n        declare.append("text").text(function () {\n            return opts.watermark_text.substr(i * Math.floor(text_width / 12), Math.floor(text_width / 12));\n        }).attr("fill", "#bbbbbb").attr("font-size", "18px").attr("y", function () {\n            return i * 15;\n        });\n    }\n}\n\nfunction traverseTree(node) {\n    if (node._children) {\n        node.children = node._children;\n        node._children = null;\n    }\n\n    if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n            traverseTree(node.children[i]);\n        }\n    }\n}\n\nfunction traverseTreeId(node) {\n    if (!node.id) {\n        node.id = id;\n        id++;\n    }\n\n    if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n            traverseTreeId(node.children[i]);\n        }\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/graph.js\n')}},[["./app/theme.js","manifest","common"]]]);