(window.webpackJsonp=window.webpackJsonp||[]).push([["vendor"],{"./app/vendor.js":
/*!***********************!*\
  !*** ./app/vendor.js ***!
  \***********************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('__webpack_require__(/*! ../assets/js/jquery.min */ "./assets/js/jquery.min.js");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdmVuZG9yLmpzP2I5NGIiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQUFBLENBQVEsMERBQVIiLCJmaWxlIjoiLi9hcHAvdmVuZG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIi4uL2Fzc2V0cy9qcy9qcXVlcnkubWluXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/vendor.js\n')},"./assets/js/jquery.min.js":
/*!*********************************!*\
  !*** ./assets/js/jquery.min.js ***!
  \*********************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v1.9.1\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2013-2-4\n */\n(function (window, undefined) {\n\n\t// Can\'t do this because several apps including ASP.NET trace\n\t// the stack via arguments.caller.callee and Firefox dies if\n\t// you try to trace through "use strict" call chains. (#13335)\n\t// Support: Firefox 18+\n\t//"use strict";\n\tvar\n\t// The deferred used on DOM ready\n\treadyList,\n\n\n\t// A central reference to the root jQuery(document)\n\trootjQuery,\n\n\n\t// Support: IE<9\n\t// For `typeof node.method` instead of `node.method !== undefined`\n\tcore_strundefined = typeof undefined,\n\n\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\t    location = window.location,\n\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$,\n\n\n\t// [[Class]] -> type pairs\n\tclass2type = {},\n\n\n\t// List of deleted data cache ids, so we can reuse them\n\tcore_deletedIds = [],\n\t    core_version = "1.9.1",\n\n\n\t// Save a reference to some core methods\n\tcore_concat = core_deletedIds.concat,\n\t    core_push = core_deletedIds.push,\n\t    core_slice = core_deletedIds.slice,\n\t    core_indexOf = core_deletedIds.indexOf,\n\t    core_toString = class2type.toString,\n\t    core_hasOwn = class2type.hasOwnProperty,\n\t    core_trim = core_version.trim,\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function (selector, context) {\n\t\t// The jQuery object is actually just the init constructor \'enhanced\'\n\t\treturn new jQuery.fn.init(selector, context, rootjQuery);\n\t},\n\n\n\t// Used for matching numbers\n\tcore_pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n\n\n\t// Used for splitting on whitespace\n\tcore_rnotwhite = /\\S+/g,\n\n\n\t// Make sure we trim BOM and NBSP (here\'s looking at you, Safari 5.0 and IE)\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\n\t// Match a standalone tag\n\trsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n\n\n\t// JSON RegExp\n\trvalidchars = /^[\\],:{}\\s]*$/,\n\t    rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n\t    rvalidescape = /\\\\(?:["\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n\t    rvalidtokens = /"[^"\\\\\\r\\n]*"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([\\da-z])/gi,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function (all, letter) {\n\t\treturn letter.toUpperCase();\n\t},\n\n\n\t// The ready event handler\n\tcompleted = function (event) {\n\n\t\t// readyState === "complete" is good enough for us to call the dom ready in oldIE\n\t\tif (document.addEventListener || event.type === "load" || document.readyState === "complete") {\n\t\t\tdetach();\n\t\t\tjQuery.ready();\n\t\t}\n\t},\n\n\t// Clean-up method for dom ready events\n\tdetach = function () {\n\t\tif (document.addEventListener) {\n\t\t\tdocument.removeEventListener("DOMContentLoaded", completed, false);\n\t\t\twindow.removeEventListener("load", completed, false);\n\t\t} else {\n\t\t\tdocument.detachEvent("onreadystatechange", completed);\n\t\t\twindow.detachEvent("onload", completed);\n\t\t}\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\t\t// The current version of jQuery being used\n\t\tjquery: core_version,\n\n\t\tconstructor: jQuery,\n\t\tinit: function (selector, context, rootjQuery) {\n\t\t\tvar match, elem;\n\n\t\t\t// HANDLE: $(""), $(null), $(undefined), $(false)\n\t\t\tif (!selector) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Handle HTML strings\n\t\t\tif (typeof selector === "string") {\n\t\t\t\tif (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {\n\t\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\t\tmatch = [null, selector, null];\n\t\t\t\t} else {\n\t\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t\t}\n\n\t\t\t\t// Match html or make sure no context is specified for #id\n\t\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\t\tif (match[1]) {\n\t\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t\t// scripts is true for back-compat\n\t\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\t\tfor (match in context) {\n\t\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t// Handle the case where IE and Opera return items\n\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\tif (elem.id !== match[2]) {\n\t\t\t\t\t\t\t\treturn rootjQuery.find(selector);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\n\t\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.context = document;\n\t\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}\n\n\t\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t\t} else if (!context || context.jquery) {\n\t\t\t\t\treturn (context || rootjQuery).find(selector);\n\n\t\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t\t} else {\n\t\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(DOMElement)\n\t\t\t} else if (selector.nodeType) {\n\t\t\t\tthis.context = this[0] = selector;\n\t\t\t\tthis.length = 1;\n\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(function)\n\t\t\t\t// Shortcut for document ready\n\t\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\t\treturn rootjQuery.ready(selector);\n\t\t\t}\n\n\t\t\tif (selector.selector !== undefined) {\n\t\t\t\tthis.selector = selector.selector;\n\t\t\t\tthis.context = selector.context;\n\t\t\t}\n\n\t\t\treturn jQuery.makeArray(selector, this);\n\t\t},\n\n\t\t// Start with an empty selector\n\t\tselector: "",\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\t// The number of elements contained in the matched element set\n\t\tsize: function () {\n\t\t\treturn this.length;\n\t\t},\n\n\t\ttoArray: function () {\n\t\t\treturn core_slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function (num) {\n\t\t\treturn num == null ?\n\n\t\t\t// Return a \'clean\' array\n\t\t\tthis.toArray() :\n\n\t\t\t// Return just the object\n\t\t\tnum < 0 ? this[this.length + num] : this[num];\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function (elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\t\t\tret.context = this.context;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\t// (You can seed the arguments with an array of args, but this is\n\t\t// only used internally.)\n\t\teach: function (callback, args) {\n\t\t\treturn jQuery.each(this, callback, args);\n\t\t},\n\n\t\tready: function (fn) {\n\t\t\t// Add the callback\n\t\t\tjQuery.ready.promise().done(fn);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tslice: function () {\n\t\t\treturn this.pushStack(core_slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function () {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function () {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function (i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tmap: function (callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tend: function () {\n\t\t\treturn this.prevObject || this.constructor(null);\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array\'s method, not like a jQuery method.\n\t\tpush: core_push,\n\t\tsort: [].sort,\n\t\tsplice: [].splice\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tjQuery.fn.init.prototype = jQuery.fn;\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar src,\n\t\t    copyIsArray,\n\t\t    copy,\n\t\t    name,\n\t\t    options,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === "boolean") {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif (typeof target !== "object" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// extend jQuery itself if only one argument is passed\n\t\tif (length === i) {\n\t\t\ttarget = this;\n\t\t\t--i;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we\'re merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don\'t bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\t\tnoConflict: function (deep) {\n\t\t\tif (window.$ === jQuery) {\n\t\t\t\twindow.$ = _$;\n\t\t\t}\n\n\t\t\tif (deep && window.jQuery === jQuery) {\n\t\t\t\twindow.jQuery = _jQuery;\n\t\t\t}\n\n\t\t\treturn jQuery;\n\t\t},\n\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function (hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\n\t\t// Handle when the DOM is ready\n\t\tready: function (wait) {\n\n\t\t\t// Abort if there are pending holds or we\'re already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\t\t\tif (!document.body) {\n\t\t\t\treturn setTimeout(jQuery.ready);\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\n\t\t\t// Trigger any bound ready events\n\t\t\tif (jQuery.fn.trigger) {\n\t\t\t\tjQuery(document).trigger("ready").off("ready");\n\t\t\t}\n\t\t},\n\n\t\t// See test/unit/core.js for details concerning isFunction.\n\t\t// Since version 1.3, DOM methods and functions like alert\n\t\t// aren\'t supported. They return false on IE (#2968).\n\t\tisFunction: function (obj) {\n\t\t\treturn jQuery.type(obj) === "function";\n\t\t},\n\n\t\tisArray: Array.isArray || function (obj) {\n\t\t\treturn jQuery.type(obj) === "array";\n\t\t},\n\n\t\tisWindow: function (obj) {\n\t\t\treturn obj != null && obj == obj.window;\n\t\t},\n\n\t\tisNumeric: function (obj) {\n\t\t\treturn !isNaN(parseFloat(obj)) && isFinite(obj);\n\t\t},\n\n\t\ttype: function (obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn String(obj);\n\t\t\t}\n\t\t\treturn typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(obj)] || "object" : typeof obj;\n\t\t},\n\n\t\tisPlainObject: function (obj) {\n\t\t\t// Must be an Object.\n\t\t\t// Because of IE, we also have to check the presence of the constructor property.\n\t\t\t// Make sure that DOM nodes and window objects don\'t pass through, as well\n\t\t\tif (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Not own constructor property must be Object\n\t\t\t\tif (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t\t// if last one is own, then all properties are own.\n\n\t\t\tvar key;\n\t\t\tfor (key in obj) {}\n\n\t\t\treturn key === undefined || core_hasOwn.call(obj, key);\n\t\t},\n\n\t\tisEmptyObject: function (obj) {\n\t\t\tvar name;\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\terror: function (msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\t// data: string of html\n\t\t// context (optional): If specified, the fragment will be created in this context, defaults to document\n\t\t// keepScripts (optional): If true, will include scripts passed in the html string\n\t\tparseHTML: function (data, context, keepScripts) {\n\t\t\tif (!data || typeof data !== "string") {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (typeof context === "boolean") {\n\t\t\t\tkeepScripts = context;\n\t\t\t\tcontext = false;\n\t\t\t}\n\t\t\tcontext = context || document;\n\n\t\t\tvar parsed = rsingleTag.exec(data),\n\t\t\t    scripts = !keepScripts && [];\n\n\t\t\t// Single tag\n\t\t\tif (parsed) {\n\t\t\t\treturn [context.createElement(parsed[1])];\n\t\t\t}\n\n\t\t\tparsed = jQuery.buildFragment([data], context, scripts);\n\t\t\tif (scripts) {\n\t\t\t\tjQuery(scripts).remove();\n\t\t\t}\n\t\t\treturn jQuery.merge([], parsed.childNodes);\n\t\t},\n\n\t\tparseJSON: function (data) {\n\t\t\t// Attempt to parse using the native JSON parser first\n\t\t\tif (window.JSON && window.JSON.parse) {\n\t\t\t\treturn window.JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (data === null) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (typeof data === "string") {\n\n\t\t\t\t// Make sure leading/trailing whitespace is removed (IE can\'t handle it)\n\t\t\t\tdata = jQuery.trim(data);\n\n\t\t\t\tif (data) {\n\t\t\t\t\t// Make sure the incoming data is actual JSON\n\t\t\t\t\t// Logic borrowed from http://json.org/json2.js\n\t\t\t\t\tif (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {\n\n\t\t\t\t\t\treturn new Function("return " + data)();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjQuery.error("Invalid JSON: " + data);\n\t\t},\n\n\t\t// Cross-browser xml parsing\n\t\tparseXML: function (data) {\n\t\t\tvar xml, tmp;\n\t\t\tif (!data || typeof data !== "string") {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (window.DOMParser) {\n\t\t\t\t\t// Standard\n\t\t\t\t\ttmp = new DOMParser();\n\t\t\t\t\txml = tmp.parseFromString(data, "text/xml");\n\t\t\t\t} else {\n\t\t\t\t\t// IE\n\t\t\t\t\txml = new ActiveXObject("Microsoft.XMLDOM");\n\t\t\t\t\txml.async = "false";\n\t\t\t\t\txml.loadXML(data);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\txml = undefined;\n\t\t\t}\n\t\t\tif (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {\n\t\t\t\tjQuery.error("Invalid XML: " + data);\n\t\t\t}\n\t\t\treturn xml;\n\t\t},\n\n\t\tnoop: function () {},\n\n\t\t// Evaluates a script in a global context\n\t\t// Workarounds based on findings by Jim Driscoll\n\t\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n\t\tglobalEval: function (data) {\n\t\t\tif (data && jQuery.trim(data)) {\n\t\t\t\t// We use execScript on Internet Explorer\n\t\t\t\t// We use an anonymous function so that context is window\n\t\t\t\t// rather than jQuery in Firefox\n\t\t\t\t(window.execScript || function (data) {\n\t\t\t\t\twindow["eval"].call(window, data);\n\t\t\t\t})(data);\n\t\t\t}\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function (string) {\n\t\t\treturn string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\tnodeName: function (elem, name) {\n\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t\t},\n\n\t\t// args is for internal usage only\n\t\teach: function (obj, callback, args) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = obj.length,\n\t\t\t    isArray = isArraylike(obj);\n\n\t\t\tif (args) {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// A special, fast, case for the most common use of each\n\t\t\t} else {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Use native String.trim function wherever possible\n\t\ttrim: core_trim && !core_trim.call("\\uFEFF\\xA0") ? function (text) {\n\t\t\treturn text == null ? "" : core_trim.call(text);\n\t\t} :\n\n\t\t// Otherwise use our own trimming functionality\n\t\tfunction (text) {\n\t\t\treturn text == null ? "" : (text + "").replace(rtrim, "");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function (arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArraylike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tcore_push.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function (elem, arr, i) {\n\t\t\tvar len;\n\n\t\t\tif (arr) {\n\t\t\t\tif (core_indexOf) {\n\t\t\t\t\treturn core_indexOf.call(arr, elem, i);\n\t\t\t\t}\n\n\t\t\t\tlen = arr.length;\n\t\t\t\ti = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t// Skip accessing in sparse arrays\n\t\t\t\t\tif (i in arr && arr[i] === elem) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t},\n\n\t\tmerge: function (first, second) {\n\t\t\tvar l = second.length,\n\t\t\t    i = first.length,\n\t\t\t    j = 0;\n\n\t\t\tif (typeof l === "number") {\n\t\t\t\tfor (; j < l; j++) {\n\t\t\t\t\tfirst[i++] = second[j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (second[j] !== undefined) {\n\t\t\t\t\tfirst[i++] = second[j++];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function (elems, callback, inv) {\n\t\t\tvar retVal,\n\t\t\t    ret = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length;\n\t\t\tinv = !!inv;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tretVal = !!callback(elems[i], i);\n\t\t\t\tif (inv !== retVal) {\n\t\t\t\t\tret.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function (elems, callback, arg) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    isArray = isArraylike(elems),\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their\n\t\t\tif (isArray) {\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret[ret.length] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret[ret.length] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn core_concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function (fn, context) {\n\t\t\tvar args, proxy, tmp;\n\n\t\t\tif (typeof context === "string") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = core_slice.call(arguments, 2);\n\t\t\tproxy = function () {\n\t\t\t\treturn fn.apply(context || this, args.concat(core_slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\t// Multifunctional method to get and set values of a collection\n\t\t// The value/s can optionally be executed if it\'s a function\n\t\taccess: function (elems, fn, key, value, chainable, emptyGet, raw) {\n\t\t\tvar i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    bulk = key == null;\n\n\t\t\t// Sets many values\n\t\t\tif (jQuery.type(key) === "object") {\n\t\t\t\tchainable = true;\n\t\t\t\tfor (i in key) {\n\t\t\t\t\tjQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t\t}\n\n\t\t\t\t// Sets one value\n\t\t\t} else if (value !== undefined) {\n\t\t\t\tchainable = true;\n\n\t\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\t\traw = true;\n\t\t\t\t}\n\n\t\t\t\tif (bulk) {\n\t\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\t\tif (raw) {\n\t\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\t\tfn = null;\n\n\t\t\t\t\t\t// ...except when executing function values\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbulk = fn;\n\t\t\t\t\t\tfn = function (elem, key, value) {\n\t\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fn) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn chainable ? elems :\n\n\t\t\t// Gets\n\t\t\tbulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;\n\t\t},\n\n\t\tnow: function () {\n\t\t\treturn new Date().getTime();\n\t\t}\n\t});\n\n\tjQuery.ready.promise = function (obj) {\n\t\tif (!readyList) {\n\n\t\t\treadyList = jQuery.Deferred();\n\n\t\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t\t// we once tried to use readyState "interactive" here, but it caused issues like the one\n\t\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\t\tif (document.readyState === "complete") {\n\t\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\t\tsetTimeout(jQuery.ready);\n\n\t\t\t\t// Standards-based browsers support DOMContentLoaded\n\t\t\t} else if (document.addEventListener) {\n\t\t\t\t// Use the handy event callback\n\t\t\t\tdocument.addEventListener("DOMContentLoaded", completed, false);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.addEventListener("load", completed, false);\n\n\t\t\t\t// If IE event model is used\n\t\t\t} else {\n\t\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\t\tdocument.attachEvent("onreadystatechange", completed);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.attachEvent("onload", completed);\n\n\t\t\t\t// If IE and not a frame\n\t\t\t\t// continually check to see if the document is ready\n\t\t\t\tvar top = false;\n\n\t\t\t\ttry {\n\t\t\t\t\ttop = window.frameElement == null && document.documentElement;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (top && top.doScroll) {\n\t\t\t\t\t(function doScrollCheck() {\n\t\t\t\t\t\tif (!jQuery.isReady) {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\t\ttop.doScroll("left");\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn setTimeout(doScrollCheck, 50);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// detach all dom ready events\n\t\t\t\t\t\t\tdetach();\n\n\t\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\t\tjQuery.ready();\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn readyList.promise(obj);\n\t};\n\n\t// Populate the class2type map\n\tjQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {\n\t\tclass2type["[object " + name + "]"] = name.toLowerCase();\n\t});\n\n\tfunction isArraylike(obj) {\n\t\tvar length = obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (obj.nodeType === 1 && length) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 && length - 1 in obj);\n\t}\n\n\t// All jQuery objects should point back to these\n\trootjQuery = jQuery(document);\n\t// String to Object options format cache\n\tvar optionsCache = {};\n\n\t// Convert String-formatted options into Object-formatted ones and store in cache\n\tfunction createOptions(options) {\n\t\tvar object = optionsCache[options] = {};\n\t\tjQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * "fired" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value (for non-forgettable lists)\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\n\t\t// Fire callbacks\n\t\tfire = function (data) {\n\t\t\tmemory = options.memory && data;\n\t\t\tfired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor (; list && firingIndex < firingLength; firingIndex++) {\n\t\t\t\tif (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif (list) {\n\t\t\t\tif (stack) {\n\t\t\t\t\tif (stack.length) {\n\t\t\t\t\t\tfire(stack.shift());\n\t\t\t\t\t}\n\t\t\t\t} else if (memory) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tvar type = jQuery.type(arg);\n\t\t\t\t\t\t\tif (type === "function") {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && type !== "string") {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t\t// With memory, if we\'re not firing then\n\t\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if (memory) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire(memory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\t\tlist.splice(index, 1);\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif (firing) {\n\t\t\t\t\t\t\t\tif (index <= firingLength) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function (fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function () {\n\t\t\t\tlist = [];\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function () {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function () {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function () {\n\t\t\t\tstack = undefined;\n\t\t\t\tif (!memory) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function () {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function (context, args) {\n\t\t\t\targs = args || [];\n\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\tif (list && (!fired || stack)) {\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tstack.push(args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire(args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function () {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function () {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\tjQuery.extend({\n\n\t\tDeferred: function (func) {\n\t\t\tvar tuples = [\n\t\t\t// action, add listener, listener list, final state\n\t\t\t["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],\n\t\t\t    state = "pending",\n\t\t\t    promise = {\n\t\t\t\tstate: function () {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function () {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function () /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\t\t\t\tvar action = tuple[0],\n\t\t\t\t\t\t\t    fn = jQuery.isFunction(fns[i]) && fns[i];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function (obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, promise) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Keep pipe for back-compat\n\t\t\tpromise.pipe = promise.then;\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[3];\n\n\t\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\t\tpromise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\t\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\t\tstate = stateString;\n\n\t\t\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t\t}, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t\tdeferred[tuple[0] + "With"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\tpromise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function (subordinate /* , ..., subordinateN */) {\n\t\t\tvar i = 0,\n\t\t\t    resolveValues = core_slice.call(arguments),\n\t\t\t    length = resolveValues.length,\n\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function (i, contexts, values) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tcontexts[i] = this;\n\t\t\t\t\tvalues[i] = arguments.length > 1 ? core_slice.call(arguments) : value;\n\t\t\t\t\tif (values === progressValues) {\n\t\t\t\t\t\tdeferred.notifyWith(contexts, values);\n\t\t\t\t\t} else if (! --remaining) {\n\t\t\t\t\t\tdeferred.resolveWith(contexts, values);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\t    progressValues,\n\t\t\t    progressContexts,\n\t\t\t    resolveContexts;\n\n\t\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\t\tif (length > 1) {\n\t\t\t\tprogressValues = new Array(length);\n\t\t\t\tprogressContexts = new Array(length);\n\t\t\t\tresolveContexts = new Array(length);\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n\t\t\t\t\t\tresolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t--remaining;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we\'re not waiting on anything, resolve the master\n\t\t\tif (!remaining) {\n\t\t\t\tdeferred.resolveWith(resolveContexts, resolveValues);\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t}\n\t});\n\tjQuery.support = function () {\n\n\t\tvar support,\n\t\t    all,\n\t\t    a,\n\t\t    input,\n\t\t    select,\n\t\t    fragment,\n\t\t    opt,\n\t\t    eventName,\n\t\t    isSupported,\n\t\t    i,\n\t\t    div = document.createElement("div");\n\n\t\t// Setup\n\t\tdiv.setAttribute("className", "t");\n\t\tdiv.innerHTML = "  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>";\n\n\t\t// Support tests won\'t run in some limited or non-browser environments\n\t\tall = div.getElementsByTagName("*");\n\t\ta = div.getElementsByTagName("a")[0];\n\t\tif (!all || !a || !all.length) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// First batch of tests\n\t\tselect = document.createElement("select");\n\t\topt = select.appendChild(document.createElement("option"));\n\t\tinput = div.getElementsByTagName("input")[0];\n\n\t\ta.style.cssText = "top:1px;float:left;opacity:.5";\n\t\tsupport = {\n\t\t\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n\t\t\tgetSetAttribute: div.className !== "t",\n\n\t\t\t// IE strips leading whitespace when .innerHTML is used\n\t\t\tleadingWhitespace: div.firstChild.nodeType === 3,\n\n\t\t\t// Make sure that tbody elements aren\'t automatically inserted\n\t\t\t// IE will insert them into empty tables\n\t\t\ttbody: !div.getElementsByTagName("tbody").length,\n\n\t\t\t// Make sure that link elements get serialized correctly by innerHTML\n\t\t\t// This requires a wrapper element in IE\n\t\t\thtmlSerialize: !!div.getElementsByTagName("link").length,\n\n\t\t\t// Get the style information from getAttribute\n\t\t\t// (IE uses .cssText instead)\n\t\t\tstyle: /top/.test(a.getAttribute("style")),\n\n\t\t\t// Make sure that URLs aren\'t manipulated\n\t\t\t// (IE normalizes it by default)\n\t\t\threfNormalized: a.getAttribute("href") === "/a",\n\n\t\t\t// Make sure that element opacity exists\n\t\t\t// (IE uses filter instead)\n\t\t\t// Use a regex to work around a WebKit issue. See #5145\n\t\t\topacity: /^0.5/.test(a.style.opacity),\n\n\t\t\t// Verify style float existence\n\t\t\t// (IE uses styleFloat instead of cssFloat)\n\t\t\tcssFloat: !!a.style.cssFloat,\n\n\t\t\t// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)\n\t\t\tcheckOn: !!input.value,\n\n\t\t\t// Make sure that a selected-by-default option has a working selected property.\n\t\t\t// (WebKit defaults to false instead of true, IE too, if it\'s in an optgroup)\n\t\t\toptSelected: opt.selected,\n\n\t\t\t// Tests for enctype support on a form (#6743)\n\t\t\tenctype: !!document.createElement("form").enctype,\n\n\t\t\t// Makes sure cloning an html5 element does not cause problems\n\t\t\t// Where outerHTML is undefined, this still works\n\t\t\thtml5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",\n\n\t\t\t// jQuery.support.boxModel DEPRECATED in 1.8 since we don\'t support Quirks Mode\n\t\t\tboxModel: document.compatMode === "CSS1Compat",\n\n\t\t\t// Will be defined later\n\t\t\tdeleteExpando: true,\n\t\t\tnoCloneEvent: true,\n\t\t\tinlineBlockNeedsLayout: false,\n\t\t\tshrinkWrapBlocks: false,\n\t\t\treliableMarginRight: true,\n\t\t\tboxSizingReliable: true,\n\t\t\tpixelPosition: false\n\t\t};\n\n\t\t// Make sure checked status is properly cloned\n\t\tinput.checked = true;\n\t\tsupport.noCloneChecked = input.cloneNode(true).checked;\n\n\t\t// Make sure that the options inside disabled selects aren\'t marked as disabled\n\t\t// (WebKit marks them as disabled)\n\t\tselect.disabled = true;\n\t\tsupport.optDisabled = !opt.disabled;\n\n\t\t// Support: IE<9\n\t\ttry {\n\t\t\tdelete div.test;\n\t\t} catch (e) {\n\t\t\tsupport.deleteExpando = false;\n\t\t}\n\n\t\t// Check if we can trust getAttribute("value")\n\t\tinput = document.createElement("input");\n\t\tinput.setAttribute("value", "");\n\t\tsupport.input = input.getAttribute("value") === "";\n\n\t\t// Check if an input maintains its value after becoming a radio\n\t\tinput.value = "t";\n\t\tinput.setAttribute("type", "radio");\n\t\tsupport.radioValue = input.value === "t";\n\n\t\t// #11217 - WebKit loses check when the name is after the checked attribute\n\t\tinput.setAttribute("checked", "t");\n\t\tinput.setAttribute("name", "t");\n\n\t\tfragment = document.createDocumentFragment();\n\t\tfragment.appendChild(input);\n\n\t\t// Check if a disconnected checkbox will retain its checked\n\t\t// value of true after appended to the DOM (IE6/7)\n\t\tsupport.appendChecked = input.checked;\n\n\t\t// WebKit doesn\'t clone checked state correctly in fragments\n\t\tsupport.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE<9\n\t\t// Opera does not clone events (and typeof div.attachEvent === undefined).\n\t\t// IE9-10 clones events bound via attachEvent, but they don\'t trigger with .click()\n\t\tif (div.attachEvent) {\n\t\t\tdiv.attachEvent("onclick", function () {\n\t\t\t\tsupport.noCloneEvent = false;\n\t\t\t});\n\n\t\t\tdiv.cloneNode(true).click();\n\t\t}\n\n\t\t// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)\n\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php\n\t\tfor (i in { submit: true, change: true, focusin: true }) {\n\t\t\tdiv.setAttribute(eventName = "on" + i, "t");\n\n\t\t\tsupport[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false;\n\t\t}\n\n\t\tdiv.style.backgroundClip = "content-box";\n\t\tdiv.cloneNode(true).style.backgroundClip = "";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === "content-box";\n\n\t\t// Run tests that need a body at doc ready\n\t\tjQuery(function () {\n\t\t\tvar container,\n\t\t\t    marginDiv,\n\t\t\t    tds,\n\t\t\t    divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",\n\t\t\t    body = document.getElementsByTagName("body")[0];\n\n\t\t\tif (!body) {\n\t\t\t\t// Return for frameset docs that don\'t have a body\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontainer = document.createElement("div");\n\t\t\tcontainer.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";\n\n\t\t\tbody.appendChild(container).appendChild(div);\n\n\t\t\t// Support: IE8\n\t\t\t// Check if table cells still have offsetWidth/Height when they are set\n\t\t\t// to display:none and there are still other visible table cells in a\n\t\t\t// table row; if so, offsetWidth/Height are not reliable for use when\n\t\t\t// determining if an element has been hidden directly using\n\t\t\t// display:none (it is still safe to use offsets if a parent element is\n\t\t\t// hidden; don safety goggles and see bug #4512 for more information).\n\t\t\tdiv.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";\n\t\t\ttds = div.getElementsByTagName("td");\n\t\t\ttds[0].style.cssText = "padding:0;margin:0;border:0;display:none";\n\t\t\tisSupported = tds[0].offsetHeight === 0;\n\n\t\t\ttds[0].style.display = "";\n\t\t\ttds[1].style.display = "none";\n\n\t\t\t// Support: IE8\n\t\t\t// Check if empty table cells still have offsetWidth/Height\n\t\t\tsupport.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;\n\n\t\t\t// Check box-sizing and margin behavior\n\t\t\tdiv.innerHTML = "";\n\t\t\tdiv.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";\n\t\t\tsupport.boxSizing = div.offsetWidth === 4;\n\t\t\tsupport.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;\n\n\t\t\t// Use window.getComputedStyle because jsdom on node.js will break without it.\n\t\t\tif (window.getComputedStyle) {\n\t\t\t\tsupport.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";\n\t\t\t\tsupport.boxSizingReliable = (window.getComputedStyle(div, null) || { width: "4px" }).width === "4px";\n\n\t\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t\t// Fails in WebKit before Feb 2011 nightlies\n\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\tmarginDiv = div.appendChild(document.createElement("div"));\n\t\t\t\tmarginDiv.style.cssText = div.style.cssText = divReset;\n\t\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = "0";\n\t\t\t\tdiv.style.width = "1px";\n\n\t\t\t\tsupport.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);\n\t\t\t}\n\n\t\t\tif (typeof div.style.zoom !== core_strundefined) {\n\t\t\t\t// Support: IE<8\n\t\t\t\t// Check if natively block-level elements act like inline-block\n\t\t\t\t// elements when setting their display to \'inline\' and giving\n\t\t\t\t// them layout\n\t\t\t\tdiv.innerHTML = "";\n\t\t\t\tdiv.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";\n\t\t\t\tsupport.inlineBlockNeedsLayout = div.offsetWidth === 3;\n\n\t\t\t\t// Support: IE6\n\t\t\t\t// Check if elements with layout shrink-wrap their children\n\t\t\t\tdiv.style.display = "block";\n\t\t\t\tdiv.innerHTML = "<div></div>";\n\t\t\t\tdiv.firstChild.style.width = "5px";\n\t\t\t\tsupport.shrinkWrapBlocks = div.offsetWidth !== 3;\n\n\t\t\t\tif (support.inlineBlockNeedsLayout) {\n\t\t\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\n\t\t\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\tbody.style.zoom = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbody.removeChild(container);\n\n\t\t\t// Null elements to avoid leaks in IE\n\t\t\tcontainer = div = tds = marginDiv = null;\n\t\t});\n\n\t\t// Null elements to avoid leaks in IE\n\t\tall = select = fragment = opt = a = input = null;\n\n\t\treturn support;\n\t}();\n\n\tvar rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n\t    rmultiDash = /([A-Z])/g;\n\n\tfunction internalData(elem, name, data, pvt /* Internal Use Only */) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar thisCache,\n\t\t    ret,\n\t\t    internalKey = jQuery.expando,\n\t\t    getByName = typeof name === "string",\n\n\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\n\t\t// can\'t GC object references properly across the DOM-JS boundary\n\t\tisNode = elem.nodeType,\n\n\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\n\t\t// attached directly to the object so GC can occur automatically\n\t\tcache = isNode ? jQuery.cache : elem,\n\n\n\t\t// Only defining an ID for JS objects if its cache already exists allows\n\t\t// the code to shortcut on the same path as a DOM node with no cache\n\t\tid = isNode ? elem[internalKey] : elem[internalKey] && internalKey;\n\n\t\t// Avoid doing any more work than we need to when trying to get data on an\n\t\t// object that has no data at all\n\t\tif ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!id) {\n\t\t\t// Only DOM nodes need a new unique ID for each element since their data\n\t\t\t// ends up in the global cache\n\t\t\tif (isNode) {\n\t\t\t\telem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;\n\t\t\t} else {\n\t\t\t\tid = internalKey;\n\t\t\t}\n\t\t}\n\n\t\tif (!cache[id]) {\n\t\t\tcache[id] = {};\n\n\t\t\t// Avoids exposing jQuery metadata on plain JS objects when the object\n\t\t\t// is serialized using JSON.stringify\n\t\t\tif (!isNode) {\n\t\t\t\tcache[id].toJSON = jQuery.noop;\n\t\t\t}\n\t\t}\n\n\t\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\n\t\t// shallow copied over onto the existing cache\n\t\tif (typeof name === "object" || typeof name === "function") {\n\t\t\tif (pvt) {\n\t\t\t\tcache[id] = jQuery.extend(cache[id], name);\n\t\t\t} else {\n\t\t\t\tcache[id].data = jQuery.extend(cache[id].data, name);\n\t\t\t}\n\t\t}\n\n\t\tthisCache = cache[id];\n\n\t\t// jQuery data() is stored in a separate object inside the object\'s internal data\n\t\t// cache in order to avoid key collisions between internal data and user-defined\n\t\t// data.\n\t\tif (!pvt) {\n\t\t\tif (!thisCache.data) {\n\t\t\t\tthisCache.data = {};\n\t\t\t}\n\n\t\t\tthisCache = thisCache.data;\n\t\t}\n\n\t\tif (data !== undefined) {\n\t\t\tthisCache[jQuery.camelCase(name)] = data;\n\t\t}\n\n\t\t// Check for both converted-to-camel and non-converted data property names\n\t\t// If a data property was specified\n\t\tif (getByName) {\n\n\t\t\t// First Try to find as-is property data\n\t\t\tret = thisCache[name];\n\n\t\t\t// Test for null|undefined property data\n\t\t\tif (ret == null) {\n\n\t\t\t\t// Try to find the camelCased property\n\t\t\t\tret = thisCache[jQuery.camelCase(name)];\n\t\t\t}\n\t\t} else {\n\t\t\tret = thisCache;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tfunction internalRemoveData(elem, name, pvt) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar i,\n\t\t    l,\n\t\t    thisCache,\n\t\t    isNode = elem.nodeType,\n\n\n\t\t// See jQuery.data for more information\n\t\tcache = isNode ? jQuery.cache : elem,\n\t\t    id = isNode ? elem[jQuery.expando] : jQuery.expando;\n\n\t\t// If there is already no cache entry for this object, there is no\n\t\t// purpose in continuing\n\t\tif (!cache[id]) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (name) {\n\n\t\t\tthisCache = pvt ? cache[id] : cache[id].data;\n\n\t\t\tif (thisCache) {\n\n\t\t\t\t// Support array or space separated string names for data keys\n\t\t\t\tif (!jQuery.isArray(name)) {\n\n\t\t\t\t\t// try the string as a key before any manipulation\n\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\tname = [name];\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\n\t\t\t\t\t\tname = jQuery.camelCase(name);\n\t\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\t\tname = [name];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tname = name.split(" ");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If "name" is an array of keys...\n\t\t\t\t\t// When data is initially created, via ("key", "val") signature,\n\t\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\t\tname = name.concat(jQuery.map(name, jQuery.camelCase));\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\tdelete thisCache[name[i]];\n\t\t\t\t}\n\n\t\t\t\t// If there is no data left in the cache, we want to continue\n\t\t\t\t// and let the cache object itself get destroyed\n\t\t\t\tif (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// See jQuery.data for more information\n\t\tif (!pvt) {\n\t\t\tdelete cache[id].data;\n\n\t\t\t// Don\'t destroy the parent cache unless the internal data object\n\t\t\t// had been the only thing left in it\n\t\t\tif (!isEmptyDataObject(cache[id])) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Destroy the cache\n\t\tif (isNode) {\n\t\t\tjQuery.cleanData([elem], true);\n\n\t\t\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n\t\t} else if (jQuery.support.deleteExpando || cache != cache.window) {\n\t\t\tdelete cache[id];\n\n\t\t\t// When all else fails, null\n\t\t} else {\n\t\t\tcache[id] = null;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tcache: {},\n\n\t\t// Unique for each copy of jQuery on the page\n\t\t// Non-digits removed to match rinlinejQuery\n\t\texpando: "jQuery" + (core_version + Math.random()).replace(/\\D/g, ""),\n\n\t\t// The following elements throw uncatchable exceptions if you\n\t\t// attempt to add expando properties to them.\n\t\tnoData: {\n\t\t\t"embed": true,\n\t\t\t// Ban all objects except for Flash (which handle expandos)\n\t\t\t"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",\n\t\t\t"applet": true\n\t\t},\n\n\t\thasData: function (elem) {\n\t\t\telem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];\n\t\t\treturn !!elem && !isEmptyDataObject(elem);\n\t\t},\n\n\t\tdata: function (elem, name, data) {\n\t\t\treturn internalData(elem, name, data);\n\t\t},\n\n\t\tremoveData: function (elem, name) {\n\t\t\treturn internalRemoveData(elem, name);\n\t\t},\n\n\t\t// For internal use only.\n\t\t_data: function (elem, name, data) {\n\t\t\treturn internalData(elem, name, data, true);\n\t\t},\n\n\t\t_removeData: function (elem, name) {\n\t\t\treturn internalRemoveData(elem, name, true);\n\t\t},\n\n\t\t// A method for determining if a DOM node can handle the data expando\n\t\tacceptData: function (elem) {\n\t\t\t// Do not set data on non-element because it will not be cleared (#8335).\n\t\t\tif (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];\n\n\t\t\t// nodes accept data unless otherwise specified; rejection can be conditional\n\t\t\treturn !noData || noData !== true && elem.getAttribute("classid") === noData;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function (key, value) {\n\t\t\tvar attrs,\n\t\t\t    name,\n\t\t\t    elem = this[0],\n\t\t\t    i = 0,\n\t\t\t    data = null;\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = jQuery.data(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {\n\t\t\t\t\t\tattrs = elem.attributes;\n\t\t\t\t\t\tfor (; i < attrs.length; i++) {\n\t\t\t\t\t\t\tname = attrs[i].name;\n\n\t\t\t\t\t\t\tif (!name.indexOf("data-")) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\n\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery._data(elem, "parsedAttrs", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif (typeof key === "object") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tjQuery.data(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn jQuery.access(this, function (value) {\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// Try to fetch any internally stored data first\n\t\t\t\t\treturn elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;\n\t\t\t\t}\n\n\t\t\t\tthis.each(function () {\n\t\t\t\t\tjQuery.data(this, key, value);\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length > 1, null, true);\n\t\t},\n\n\t\tremoveData: function (key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeData(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction dataAttr(elem, key, data) {\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\n\t\t\tvar name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();\n\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === "string") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = data === "true" ? true : data === "false" ? false : data === "null" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn\'t change the string\n\t\t\t\t\t+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn\'t changed later\n\t\t\t\tjQuery.data(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// checks a cache object for emptiness\n\tfunction isEmptyDataObject(obj) {\n\t\tvar name;\n\t\tfor (name in obj) {\n\n\t\t\t// if the public data object is empty, the private is still empty\n\t\t\tif (name === "data" && jQuery.isEmptyObject(obj[name])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (name !== "toJSON") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\tjQuery.extend({\n\t\tqueue: function (elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || "fx") + "queue";\n\t\t\t\tqueue = jQuery._data(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || jQuery.isArray(data)) {\n\t\t\t\t\t\tqueue = jQuery._data(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function (elem, type) {\n\t\t\ttype = type || "fx";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function () {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === "inprogress") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\thooks.cur = fn;\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === "fx") {\n\t\t\t\t\tqueue.unshift("inprogress");\n\t\t\t\t}\n\n\t\t\t\t// clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// not intended for public consumption - generates a queueHooks object, or returns the current one\n\t\t_queueHooks: function (elem, type) {\n\t\t\tvar key = type + "queueHooks";\n\t\t\treturn jQuery._data(elem, key) || jQuery._data(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks("once memory").add(function () {\n\t\t\t\t\tjQuery._removeData(elem, type + "queue");\n\t\t\t\t\tjQuery._removeData(elem, key);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function (type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== "string") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = "fx";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === "fx" && queue[0] !== "inprogress") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function (type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\t// Based off of the plugin by Clint Helfers, with permission.\n\t\t// http://blindsignals.com/index.php/2009/07/jquery-delay/\n\t\tdelay: function (time, type) {\n\t\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\t\ttype = type || "fx";\n\n\t\t\treturn this.queue(type, function (next, hooks) {\n\t\t\t\tvar timeout = setTimeout(next, time);\n\t\t\t\thooks.stop = function () {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\tclearQueue: function (type) {\n\t\t\treturn this.queue(type || "fx", []);\n\t\t},\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function (type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function () {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== "string") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || "fx";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = jQuery._data(elements[i], type + "queueHooks");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar nodeHook,\n\t    boolHook,\n\t    rclass = /[\\t\\r\\n]/g,\n\t    rreturn = /\\r/g,\n\t    rfocusable = /^(?:input|select|textarea|button|object)$/i,\n\t    rclickable = /^(?:a|area)$/i,\n\t    rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,\n\t    ruseDefault = /^(?:checked|selected)$/i,\n\t    getSetAttribute = jQuery.support.getSetAttribute,\n\t    getSetInput = jQuery.support.input;\n\n\tjQuery.fn.extend({\n\t\tattr: function (name, value) {\n\t\t\treturn jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function (name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t},\n\n\t\tprop: function (name, value) {\n\t\t\treturn jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function (name) {\n\t\t\tname = jQuery.propFix[name] || name;\n\t\t\treturn this.each(function () {\n\t\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\n\t\t\t\ttry {\n\t\t\t\t\tthis[name] = undefined;\n\t\t\t\t\tdelete this[name];\n\t\t\t\t} catch (e) {}\n\t\t\t});\n\t\t},\n\n\t\taddClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = typeof value === "string" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (proceed) {\n\t\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\t\tclasses = (value || "").match(core_rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(" " + clazz + " ") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + " ";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.className = jQuery.trim(cur);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = arguments.length === 0 || typeof value === "string" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (proceed) {\n\t\t\t\tclasses = (value || "").match(core_rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(" " + clazz + " ") >= 0) {\n\t\t\t\t\t\t\t\tcur = cur.replace(" " + clazz + " ", " ");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.className = value ? jQuery.trim(cur) : "";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function (value, stateVal) {\n\t\t\tvar type = typeof value,\n\t\t\t    isBool = typeof stateVal === "boolean";\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (type === "string") {\n\t\t\t\t\t// toggle individual class names\n\t\t\t\t\tvar className,\n\t\t\t\t\t    i = 0,\n\t\t\t\t\t    self = jQuery(this),\n\t\t\t\t\t    state = stateVal,\n\t\t\t\t\t    classNames = value.match(core_rnotwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\t\t\t\t\t\t// check each className given, space separated list\n\t\t\t\t\t\tstate = isBool ? state : !self.hasClass(className);\n\t\t\t\t\t\tself[state ? "addClass" : "removeClass"](className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (type === core_strundefined || type === "boolean") {\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\t// store className if set\n\t\t\t\t\t\tjQuery._data(this, "__className__", this.className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we\'re passed "false",\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tthis.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function (selector) {\n\t\t\tvar className = " " + selector + " ",\n\t\t\t    i = 0,\n\t\t\t    l = this.length;\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tif (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\tval: function (value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\treturn typeof ret === "string" ?\n\t\t\t\t\t// handle most common string cases\n\t\t\t\t\tret.replace(rreturn, "") :\n\t\t\t\t\t// handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? "" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val,\n\t\t\t\t    self = jQuery(this);\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, self.val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as ""; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = "";\n\t\t\t\t} else if (typeof val === "number") {\n\t\t\t\t\tval += "";\n\t\t\t\t} else if (jQuery.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? "" : value + "";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\t// attributes.value is undefined in Blackberry 4.7 but\n\t\t\t\t\t// uses .value. See #6932\n\t\t\t\t\tvar val = elem.attributes.value;\n\t\t\t\t\treturn !val || val.specified ? elem.value : elem.text;\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === "select-one" || index < 0,\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length,\n\t\t\t\t\t    i = index < 0 ? max : one ? index : 0;\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// oldIE doesn\'t update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) && (\n\t\t\t\t\t\t// Don\'t return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\tjQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don\'t need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tvar values = jQuery.makeArray(value);\n\n\t\t\t\t\tjQuery(elem).find("option").each(function () {\n\t\t\t\t\t\tthis.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!values.length) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattr: function (elem, name, value) {\n\t\t\tvar hooks,\n\t\t\t    notxml,\n\t\t\t    ret,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don\'t get/set attributes on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (typeof elem.getAttribute === core_strundefined) {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\t// All attributes are lowercase\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (notxml) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\thooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t} else if (hooks && notxml && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\telem.setAttribute(name, value + "");\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else if (hooks && notxml && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t} else {\n\n\t\t\t\t// In IE9+, Flash objects don\'t have .getAttribute (#12945)\n\t\t\t\t// Support: IE9+\n\t\t\t\tif (typeof elem.getAttribute !== core_strundefined) {\n\t\t\t\t\tret = elem.getAttribute(name);\n\t\t\t\t}\n\n\t\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function (elem, value) {\n\t\t\tvar name,\n\t\t\t    propName,\n\t\t\t    i = 0,\n\t\t\t    attrNames = value && value.match(core_rnotwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\tpropName = jQuery.propFix[name] || name;\n\n\t\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\t\tif (rboolean.test(name)) {\n\t\t\t\t\t\t// Set corresponding property to false for boolean attributes\n\t\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8\n\t\t\t\t\t\tif (!getSetAttribute && ruseDefault.test(name)) {\n\t\t\t\t\t\t\telem[jQuery.camelCase("default-" + name)] = elem[propName] = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem[propName] = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjQuery.attr(elem, name, "");\n\t\t\t\t\t}\n\n\t\t\t\t\telem.removeAttribute(getSetAttribute ? name : propName);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tif (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {\n\t\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9\n\t\t\t\t\t\t// Reset value to default in case type is set after value during creation\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute("type", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropFix: {\n\t\t\ttabindex: "tabIndex",\n\t\t\treadonly: "readOnly",\n\t\t\t"for": "htmlFor",\n\t\t\t"class": "className",\n\t\t\tmaxlength: "maxLength",\n\t\t\tcellspacing: "cellSpacing",\n\t\t\tcellpadding: "cellPadding",\n\t\t\trowspan: "rowSpan",\n\t\t\tcolspan: "colSpan",\n\t\t\tusemap: "useMap",\n\t\t\tframeborder: "frameBorder",\n\t\t\tcontenteditable: "contentEditable"\n\t\t},\n\n\t\tprop: function (elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    notxml,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don\'t get/set properties on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\tif (notxml) {\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn elem[name] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn elem[name];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\t// elem.tabIndex doesn\'t always return the correct value when it hasn\'t been explicitly set\n\t\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t\tvar attributeNode = elem.getAttributeNode("tabindex");\n\n\t\t\t\t\treturn attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hook for boolean attributes\n\tboolHook = {\n\t\tget: function (elem, name) {\n\t\t\tvar\n\t\t\t// Use .prop to determine if this attribute is understood as boolean\n\t\t\tprop = jQuery.prop(elem, name),\n\n\n\t\t\t// Fetch it accordingly\n\t\t\tattr = typeof prop === "boolean" && elem.getAttribute(name),\n\t\t\t    detail = typeof prop === "boolean" ? getSetInput && getSetAttribute ? attr != null :\n\t\t\t// oldIE fabricates an empty string for missing boolean attributes\n\t\t\t// and conflates checked/selected into attroperties\n\t\t\truseDefault.test(name) ? elem[jQuery.camelCase("default-" + name)] : !!attr :\n\n\t\t\t// fetch an attribute node for properties not recognized as boolean\n\t\t\telem.getAttributeNode(name);\n\n\t\t\treturn detail && detail.value !== false ? name.toLowerCase() : undefined;\n\t\t},\n\t\tset: function (elem, value, name) {\n\t\t\tif (value === false) {\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {\n\t\t\t\t// IE<8 needs the *property* name\n\t\t\t\telem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);\n\n\t\t\t\t// Use defaultChecked and defaultSelected for oldIE\n\t\t\t} else {\n\t\t\t\telem[jQuery.camelCase("default-" + name)] = elem[name] = true;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\t};\n\n\t// fix oldIE value attroperty\n\tif (!getSetInput || !getSetAttribute) {\n\t\tjQuery.attrHooks.value = {\n\t\t\tget: function (elem, name) {\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\treturn jQuery.nodeName(elem, "input") ?\n\n\t\t\t\t// Ignore the value *property* by using defaultValue\n\t\t\t\telem.defaultValue : ret && ret.specified ? ret.value : undefined;\n\t\t\t},\n\t\t\tset: function (elem, value, name) {\n\t\t\t\tif (jQuery.nodeName(elem, "input")) {\n\t\t\t\t\t// Does not return so that setAttribute is also used\n\t\t\t\t\telem.defaultValue = value;\n\t\t\t\t} else {\n\t\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\n\t\t\t\t\treturn nodeHook && nodeHook.set(elem, value, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE6/7 do not support getting/setting some attributes with get/setAttribute\n\tif (!getSetAttribute) {\n\n\t\t// Use this for any attribute in IE6/7\n\t\t// This fixes almost every IE6/7 issue\n\t\tnodeHook = jQuery.valHooks.button = {\n\t\t\tget: function (elem, name) {\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\treturn ret && (name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified) ? ret.value : undefined;\n\t\t\t},\n\t\t\tset: function (elem, value, name) {\n\t\t\t\t// Set the existing or create a new attribute node\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\tif (!ret) {\n\t\t\t\t\telem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));\n\t\t\t\t}\n\n\t\t\t\tret.value = value += "";\n\n\t\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\n\t\t\t\treturn name === "value" || value === elem.getAttribute(name) ? value : undefined;\n\t\t\t}\n\t\t};\n\n\t\t// Set contenteditable to false on removals(#10429)\n\t\t// Setting to empty string throws an error as an invalid value\n\t\tjQuery.attrHooks.contenteditable = {\n\t\t\tget: nodeHook.get,\n\t\t\tset: function (elem, value, name) {\n\t\t\t\tnodeHook.set(elem, value === "" ? false : value, name);\n\t\t\t}\n\t\t};\n\n\t\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\n\t\t// This is for removals\n\t\tjQuery.each(["width", "height"], function (i, name) {\n\t\t\tjQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tif (value === "") {\n\t\t\t\t\t\telem.setAttribute(name, "auto");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Some attributes require a special call on IE\n\t// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\tif (!jQuery.support.hrefNormalized) {\n\t\tjQuery.each(["href", "src", "width", "height"], function (i, name) {\n\t\t\tjQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\tvar ret = elem.getAttribute(name, 2);\n\t\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// href/src property should get the full normalized URL (#10299/#12915)\n\t\tjQuery.each(["href", "src"], function (i, name) {\n\t\t\tjQuery.propHooks[name] = {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\treturn elem.getAttribute(name, 4);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tif (!jQuery.support.style) {\n\t\tjQuery.attrHooks.style = {\n\t\t\tget: function (elem) {\n\t\t\t\t// Return undefined in the case of empty string\n\t\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\n\t\t\t\t// .cssText, that would destroy case senstitivity in URL\'s, like in "background"\n\t\t\t\treturn elem.style.cssText || undefined;\n\t\t\t},\n\t\t\tset: function (elem, value) {\n\t\t\t\treturn elem.style.cssText = value + "";\n\t\t\t}\n\t\t};\n\t}\n\n\t// Safari mis-reports the default selected property of an option\n\t// Accessing the parent\'s selectedIndex property fixes it\n\tif (!jQuery.support.optSelected) {\n\t\tjQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {\n\t\t\tget: function (elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t\t// Make sure that it also works with optgroups, see #5701\n\t\t\t\t\tif (parent.parentNode) {\n\t\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n\n\t// IE6/7 call enctype encoding\n\tif (!jQuery.support.enctype) {\n\t\tjQuery.propFix.enctype = "encoding";\n\t}\n\n\t// Radios and checkboxes getter/setter\n\tif (!jQuery.support.checkOn) {\n\t\tjQuery.each(["radio", "checkbox"], function () {\n\t\t\tjQuery.valHooks[this] = {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\t// Handle the case where in Webkit "" is returned instead of "on" if a value isn\'t specified\n\t\t\t\t\treturn elem.getAttribute("value") === null ? "on" : elem.value;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\tjQuery.each(["radio", "checkbox"], function () {\n\t\tjQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {\n\t\t\tset: function (elem, value) {\n\t\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\tvar rformElems = /^(?:input|select|textarea)$/i,\n\t    rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|contextmenu)|click/,\n\t    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\t/*\n  * Helper functions for managing events -- not part of the public interface.\n  * Props to Dean Edwards\' addEvent library for many of the ideas.\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function (elem, types, handler, data, selector) {\n\t\t\tvar tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObjIn,\n\t\t\t    special,\n\t\t\t    eventHandle,\n\t\t\t    handleObj,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery._data(elem);\n\n\t\t\t// Don\'t attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element\'s event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n\t\t\t\teventHandle.elem = elem;\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\t// jQuery(...).bind("mouseover mouseout", fn);\n\t\t\ttypes = (types || "").match(core_rnotwhite) || [""];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || "").split(".").sort();\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(".")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we\'re the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\t\t\t\t\t\t// Bind the global event handler to the element\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle, false);\n\t\t\t\t\t\t} else if (elem.attachEvent) {\n\t\t\t\t\t\t\telem.attachEvent("on" + type, eventHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element\'s handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\n\t\t\t// Nullify elem to prevent memory leaks in IE\n\t\t\telem = null;\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function (elem, types, handler, selector, mappedTypes) {\n\t\t\tvar j,\n\t\t\t    handleObj,\n\t\t\t    tmp,\n\t\t\t    origCount,\n\t\t\t    t,\n\t\t\t    events,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery.hasData(elem) && jQuery._data(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || "").match(core_rnotwhite) || [""];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || "").split(".").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if it\'s no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdelete elemData.handle;\n\n\t\t\t\t// removeData also checks for emptiness and clears the expando if empty\n\t\t\t\t// so use it instead of delete\n\t\t\t\tjQuery._removeData(elem, "events");\n\t\t\t}\n\t\t},\n\n\t\ttrigger: function (event, data, elem, onlyHandlers) {\n\t\t\tvar handle,\n\t\t\t    ontype,\n\t\t\t    cur,\n\t\t\t    bubbleType,\n\t\t\t    special,\n\t\t\t    tmp,\n\t\t\t    i,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = core_hasOwn.call(event, "type") ? event.type : event,\n\t\t\t    namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don\'t do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(".") >= 0) {\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(".");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(":") < 0 && "on" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);\n\n\t\t\tevent.isTrigger = true;\n\t\t\tevent.namespace = namespaces.join(".");\n\t\t\tevent.namespace_re = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t\t// Can\'t use an .isFunction() check here because IE6/7 fails that test.\n\t\t\t\t\t// Don\'t do default actions on window, that\'s where global variables be (#6170)\n\t\t\t\t\tif (ontype && elem[type] && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don\'t re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n\t\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\tdispatch: function (event) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix(event);\n\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    handleObj,\n\t\t\t    matched,\n\t\t\t    j,\n\t\t\t    handlerQueue = [],\n\t\t\t    args = core_slice.call(arguments),\n\t\t\t    handlers = (jQuery._data(this, "events") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or\n\t\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function (event, handlers) {\n\t\t\tvar sel,\n\t\t\t    handleObj,\n\t\t\t    matches,\n\t\t\t    i,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Find delegate handlers\n\t\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\t\tif (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {\n\n\t\t\t\tfor (; cur != this; cur = cur.parentNode || this) {\n\n\t\t\t\t\t// Don\'t check non-elements (#13208)\n\t\t\t\t\t// Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {\n\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = handlers[i];\n\n\t\t\t\t\t\t\t// Don\'t conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + " ";\n\n\t\t\t\t\t\t\tif (matches[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matches[sel]) {\n\t\t\t\t\t\t\t\tmatches.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matches.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tif (delegateCount < handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\tfix: function (event) {\n\t\t\tif (event[jQuery.expando]) {\n\t\t\t\treturn event;\n\t\t\t}\n\n\t\t\t// Create a writable copy of the event object and normalize some properties\n\t\t\tvar i,\n\t\t\t    prop,\n\t\t\t    copy,\n\t\t\t    type = event.type,\n\t\t\t    originalEvent = event,\n\t\t\t    fixHook = this.fixHooks[type];\n\n\t\t\tif (!fixHook) {\n\t\t\t\tthis.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n\t\t\t}\n\t\t\tcopy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n\n\t\t\tevent = new jQuery.Event(originalEvent);\n\n\t\t\ti = copy.length;\n\t\t\twhile (i--) {\n\t\t\t\tprop = copy[i];\n\t\t\t\tevent[prop] = originalEvent[prop];\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// Fix target property (#1925)\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = originalEvent.srcElement || document;\n\t\t\t}\n\n\t\t\t// Support: Chrome 23+, Safari?\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tif (event.target.nodeType === 3) {\n\t\t\t\tevent.target = event.target.parentNode;\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// For mouse/key events, metaKey==false if it\'s undefined (#3368, #11328)\n\t\t\tevent.metaKey = !!event.metaKey;\n\n\t\t\treturn fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n\t\t},\n\n\t\t// Includes some event props shared by KeyEvent and MouseEvent\n\t\tprops: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),\n\n\t\tfixHooks: {},\n\n\t\tkeyHooks: {\n\t\t\tprops: "char charCode key keyCode".split(" "),\n\t\t\tfilter: function (event, original) {\n\n\t\t\t\t// Add which for key events\n\t\t\t\tif (event.which == null) {\n\t\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tmouseHooks: {\n\t\t\tprops: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),\n\t\t\tfilter: function (event, original) {\n\t\t\t\tvar body,\n\t\t\t\t    eventDoc,\n\t\t\t\t    doc,\n\t\t\t\t    button = original.button,\n\t\t\t\t    fromElement = original.fromElement;\n\n\t\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\t\tif (event.pageX == null && original.clientX != null) {\n\t\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\t\tevent.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n\t\t\t\t\tevent.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n\t\t\t\t}\n\n\t\t\t\t// Add relatedTarget, if necessary\n\t\t\t\tif (!event.relatedTarget && fromElement) {\n\t\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n\t\t\t\t}\n\n\t\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t\t// Note: button is not normalized, so don\'t use it\n\t\t\t\tif (!event.which && button !== undefined) {\n\t\t\t\t\tevent.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tclick: {\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocus: {\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this !== document.activeElement && this.focus) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\n\t\t\t\t\t\t\t// let .trigger() run the handlers\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: "focusin"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this === document.activeElement && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: "focusout"\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function (event) {\n\n\t\t\t\t\t// Even when returnValue equals to undefined Firefox will still show alert\n\t\t\t\t\tif (event.result !== undefined) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsimulate: function (type, elem, event, bubble) {\n\t\t\t// Piggyback on a donor event to simulate a different one.\n\t\t\t// Fake originalEvent to avoid donor\'s stopPropagation, but if the\n\t\t\t// simulated event prevents default then we do the same on the donor.\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, { type: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t});\n\t\t\tif (bubble) {\n\t\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t\t} else {\n\t\t\t\tjQuery.event.dispatch.call(elem, e);\n\t\t\t}\n\t\t\tif (e.isDefaultPrevented()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle, false);\n\t\t}\n\t} : function (elem, type, handle) {\n\t\tvar name = "on" + type;\n\n\t\tif (elem.detachEvent) {\n\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC\n\t\t\tif (typeof elem[name] === core_strundefined) {\n\t\t\t\telem[name] = null;\n\t\t\t}\n\n\t\t\telem.detachEvent(name, handle);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\t\t// Allow instantiation without the \'new\' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn\'t have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\n\t\tpreventDefault: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If preventDefault exists, run it on the original event\n\t\t\tif (e.preventDefault) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\t// Support: IE\n\t\t\t\t// Otherwise set the returnValue property of the original event to false\n\t\t\t} else {\n\t\t\t\te.returnValue = false;\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If stopPropagation exists, run it on the original event\n\t\t\tif (e.stopPropagation) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\t// Support: IE\n\t\t\t// Set the cancelBubble property of the original event to true\n\t\t\te.cancelBubble = true;\n\t\t},\n\t\tstopImmediatePropagation: function () {\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\tjQuery.each({\n\t\tmouseenter: "mouseover",\n\t\tmouseleave: "mouseout"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function (event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\t// IE submit delegation\n\tif (!jQuery.support.submitBubbles) {\n\n\t\tjQuery.event.special.submit = {\n\t\t\tsetup: function () {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, "form")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\n\t\t\t\tjQuery.event.add(this, "click._submit keypress._submit", function (e) {\n\t\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\n\t\t\t\t\tvar elem = e.target,\n\t\t\t\t\t    form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;\n\t\t\t\t\tif (form && !jQuery._data(form, "submitBubbles")) {\n\t\t\t\t\t\tjQuery.event.add(form, "submit._submit", function (event) {\n\t\t\t\t\t\t\tevent._submit_bubble = true;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(form, "submitBubbles", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// return undefined since we don\'t need an event listener\n\t\t\t},\n\n\t\t\tpostDispatch: function (event) {\n\t\t\t\t// If form was submitted by the user, bubble the event up the tree\n\t\t\t\tif (event._submit_bubble) {\n\t\t\t\t\tdelete event._submit_bubble;\n\t\t\t\t\tif (this.parentNode && !event.isTrigger) {\n\t\t\t\t\t\tjQuery.event.simulate("submit", this.parentNode, event, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function () {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, "form")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\t\t\t\tjQuery.event.remove(this, "._submit");\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE change delegation and checkbox/radio fix\n\tif (!jQuery.support.changeBubbles) {\n\n\t\tjQuery.event.special.change = {\n\n\t\t\tsetup: function () {\n\n\t\t\t\tif (rformElems.test(this.nodeName)) {\n\t\t\t\t\t// IE doesn\'t fire change on a check/radio until blur; trigger it on click\n\t\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\n\t\t\t\t\t// This still fires onchange a second time for check/radio after blur.\n\t\t\t\t\tif (this.type === "checkbox" || this.type === "radio") {\n\t\t\t\t\t\tjQuery.event.add(this, "propertychange._change", function (event) {\n\t\t\t\t\t\t\tif (event.originalEvent.propertyName === "checked") {\n\t\t\t\t\t\t\t\tthis._just_changed = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery.event.add(this, "click._change", function (event) {\n\t\t\t\t\t\t\tif (this._just_changed && !event.isTrigger) {\n\t\t\t\t\t\t\t\tthis._just_changed = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\n\t\t\t\t\t\t\tjQuery.event.simulate("change", this, event, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\n\t\t\t\tjQuery.event.add(this, "beforeactivate._change", function (e) {\n\t\t\t\t\tvar elem = e.target;\n\n\t\t\t\t\tif (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {\n\t\t\t\t\t\tjQuery.event.add(elem, "change._change", function (event) {\n\t\t\t\t\t\t\tif (this.parentNode && !event.isSimulated && !event.isTrigger) {\n\t\t\t\t\t\t\t\tjQuery.event.simulate("change", this.parentNode, event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(elem, "changeBubbles", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\thandle: function (event) {\n\t\t\t\tvar elem = event.target;\n\n\t\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\n\t\t\t\tif (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {\n\t\t\t\t\treturn event.handleObj.handler.apply(this, arguments);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function () {\n\t\t\t\tjQuery.event.remove(this, "._change");\n\n\t\t\t\treturn !rformElems.test(this.nodeName);\n\t\t\t}\n\t\t};\n\t}\n\n\t// Create "bubbling" focus and blur events\n\tif (!jQuery.support.focusinBubbles) {\n\t\tjQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler while someone wants focusin/focusout\n\t\t\tvar attaches = 0,\n\t\t\t    handler = function (event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function () {\n\t\t\t\t\tif (attaches++ === 0) {\n\t\t\t\t\t\tdocument.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tteardown: function () {\n\t\t\t\t\tif (--attaches === 0) {\n\t\t\t\t\t\tdocument.removeEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tjQuery.fn.extend({\n\n\t\ton: function (types, selector, data, fn, /*INTERNAL*/one) {\n\t\t\tvar type, origFn;\n\n\t\t\t// Types can be a map of types/handlers\n\t\t\tif (typeof types === "object") {\n\t\t\t\t// ( types-Object, selector, data )\n\t\t\t\tif (typeof selector !== "string") {\n\t\t\t\t\t// ( types-Object, data )\n\t\t\t\t\tdata = data || selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.on(type, selector, data, types[type], one);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (data == null && fn == null) {\n\t\t\t\t// ( types, fn )\n\t\t\t\tfn = selector;\n\t\t\t\tdata = selector = undefined;\n\t\t\t} else if (fn == null) {\n\t\t\t\tif (typeof selector === "string") {\n\t\t\t\t\t// ( types, selector, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// ( types, data, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t} else if (!fn) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (one === 1) {\n\t\t\t\torigFn = fn;\n\t\t\t\tfn = function (event) {\n\t\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\t\tjQuery().off(event);\n\t\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\t// Use same guid so caller can remove using origFn\n\t\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t\t});\n\t\t},\n\t\tone: function (types, selector, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn, 1);\n\t\t},\n\t\toff: function (types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (typeof types === "object") {\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === "function") {\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t},\n\n\t\tbind: function (types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function (types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function (selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function (selector, types, fn) {\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n\t\t},\n\n\t\ttrigger: function (type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function (type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\t/*!\n  * Sizzle CSS Selector Engine\n  * Copyright 2012 jQuery Foundation and other contributors\n  * Released under the MIT license\n  * http://sizzlejs.com/\n  */\n\t(function (window, undefined) {\n\n\t\tvar i,\n\t\t    cachedruns,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    compile,\n\t\t    hasDuplicate,\n\t\t    outermostContext,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsXML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\t\t    sortOrder,\n\n\n\t\t// Instance-specific data\n\t\texpando = "sizzle" + -new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    support = {},\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\n\n\t\t// General-purpose constants\n\t\tstrundefined = typeof undefined,\n\t\t    MAX_NEGATIVE = 1 << 31,\n\n\n\t\t// Array methods\n\t\tarr = [],\n\t\t    pop = arr.pop,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf if we can\'t use a native one\n\t\tindexOf = arr.indexOf || function (elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = this.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (this[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\n\n\t\t// Regular expressions\n\n\t\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n\n\t\t// http://www.w3.org/TR/css3-syntax/#characters\n\t\tcharacterEncoding = "(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+",\n\n\n\t\t// Loosely modeled on CSS identifier characters\n\t\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = characterEncoding.replace("w", "w#"),\n\n\n\t\t// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors\n\t\toperators = "([*^$|!~]?=)",\n\t\t    attributes = "\\\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:" + operators + whitespace + "*(?:([\'\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(" + identifier + ")|)|)" + whitespace + "*\\\\]",\n\n\n\t\t// Prefer arguments quoted,\n\t\t//   then not containing pseudos/brackets,\n\t\t//   then attribute selectors/non-parenthetical expressions,\n\t\t//   then anything else\n\t\t// These preferences are here to reduce the number of selectors\n\t\t//   needing tokenize in the PSEUDO preFilter\n\t\tpseudos = ":(" + characterEncoding + ")(?:\\\\((([\'\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\\\)|)",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g"),\n\t\t    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n\t\t    rcombinators = new RegExp("^" + whitespace + "*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])" + whitespace + "*"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp("^" + identifier + "$"),\n\t\t    matchExpr = {\n\t\t\t"ID": new RegExp("^#(" + characterEncoding + ")"),\n\t\t\t"CLASS": new RegExp("^\\\\.(" + characterEncoding + ")"),\n\t\t\t"NAME": new RegExp("^\\\\[name=[\'\\"]?(" + characterEncoding + ")[\'\\"]?\\\\]"),\n\t\t\t"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),\n\t\t\t"ATTR": new RegExp("^" + attributes),\n\t\t\t"PSEUDO": new RegExp("^" + pseudos),\n\t\t\t"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n\t\t},\n\t\t    rsibling = /[\\x20\\t\\r\\n\\f]*[+~]/,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native code/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rescape = /\'|\\\\/g,\n\t\t    rattributeQuotes = /\\=[\\x20\\t\\r\\n\\f]*([^\'"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n\n\n\t\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = /\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,\n\t\t    funescape = function (_, escaped) {\n\t\t\tvar high = "0x" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\treturn high !== high ? escaped :\n\t\t\t// BMP codepoint\n\t\t\thigh < 0 ? String.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t};\n\n\t\t// Use a stripped-down slice if we can\'t use a native one\n\t\ttry {\n\t\t\tslice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;\n\t\t} catch (e) {\n\t\t\tslice = function (i) {\n\t\t\t\tvar elem,\n\t\t\t\t    results = [];\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tresults.push(elem);\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * For feature detection\n   * @param {Function} fn The function to test for native support\n   */\n\t\tfunction isNative(fn) {\n\t\t\treturn rnative.test(fn + "");\n\t\t}\n\n\t\t/**\n   * Create key-value caches of limited size\n   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\t\tfunction createCache() {\n\t\t\tvar cache,\n\t\t\t    keys = [];\n\n\t\t\treturn cache = function (key, value) {\n\t\t\t\t// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key += " ") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn cache[key] = value;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\n   * Support testing using an element\n   * @param {Function} fn Passed the created div and expects a boolean result\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar div = document.createElement("div");\n\n\t\t\ttry {\n\t\t\t\treturn fn(div);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// release memory in IE\n\t\t\t\tdiv = null;\n\t\t\t}\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar match, elem, m, nodeType,\n\t\t\t// QSA vars\n\t\t\ti, groups, old, nid, newContext, newSelector;\n\n\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\n\t\t\tcontext = context || document;\n\t\t\tresults = results || [];\n\n\t\t\tif (!selector || typeof selector !== "string") {\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\tif ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (!documentIsXML && !seed) {\n\n\t\t\t\t// Shortcuts\n\t\t\t\tif (match = rquickExpr.exec(selector)) {\n\t\t\t\t\t// Speed-up: Sizzle("#ID")\n\t\t\t\t\tif (m = match[1]) {\n\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\telem = context.getElementById(m);\n\t\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Context is not a document\n\t\t\t\t\t\t\tif (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Speed-up: Sizzle("TAG")\n\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\tpush.apply(results, slice.call(context.getElementsByTagName(selector), 0));\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Speed-up: Sizzle(".CLASS")\n\t\t\t\t\t} else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {\n\t\t\t\t\t\tpush.apply(results, slice.call(context.getElementsByClassName(m), 0));\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// QSA path\n\t\t\t\tif (support.qsa && !rbuggyQSA.test(selector)) {\n\t\t\t\t\told = true;\n\t\t\t\t\tnid = expando;\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = nodeType === 9 && selector;\n\n\t\t\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t\t\t// IE 8 doesn\'t work on object elements\n\t\t\t\t\tif (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {\n\t\t\t\t\t\tgroups = tokenize(selector);\n\n\t\t\t\t\t\tif (old = context.getAttribute("id")) {\n\t\t\t\t\t\t\tnid = old.replace(rescape, "\\\\$&");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute("id", nid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnid = "[id=\'" + nid + "\'] ";\n\n\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tgroups[i] = nid + toSelector(groups[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewContext = rsibling.test(selector) && context.parentNode || context;\n\t\t\t\t\t\tnewSelector = groups.join(",");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpush.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\tif (!old) {\n\t\t\t\t\t\t\t\tcontext.removeAttribute("id");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, "$1"), context, results, seed);\n\t\t}\n\n\t\t/**\n   * Detect xml\n   * @param {Element|Object} elem An element or a document\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn\'t yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== "HTML" : false;\n\t\t};\n\n\t\t/**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// If no document and documentElement is available, return\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Set our document\n\t\t\tdocument = doc;\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\t// Support tests\n\t\t\tdocumentIsXML = isXML(doc);\n\n\t\t\t// Check if getElementsByTagName("*") returns only elements\n\t\t\tsupport.tagNameNoComments = assert(function (div) {\n\t\t\t\tdiv.appendChild(doc.createComment(""));\n\t\t\t\treturn !div.getElementsByTagName("*").length;\n\t\t\t});\n\n\t\t\t// Check if attributes should be retrieved by attribute nodes\n\t\t\tsupport.attributes = assert(function (div) {\n\t\t\t\tdiv.innerHTML = "<select></select>";\n\t\t\t\tvar type = typeof div.lastChild.getAttribute("multiple");\n\t\t\t\t// IE8 returns a string for some attributes even when not present\n\t\t\t\treturn type !== "boolean" && type !== "string";\n\t\t\t});\n\n\t\t\t// Check if getElementsByClassName can be trusted\n\t\t\tsupport.getByClassName = assert(function (div) {\n\t\t\t\t// Opera can\'t find a second classname (in 9.6)\n\t\t\t\tdiv.innerHTML = "<div class=\'hidden e\'></div><div class=\'hidden\'></div>";\n\t\t\t\tif (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Safari 3.2 caches class attributes and doesn\'t catch changes\n\t\t\t\tdiv.lastChild.className = "e";\n\t\t\t\treturn div.getElementsByClassName("e").length === 2;\n\t\t\t});\n\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// Check if getElementsByName privileges form controls or returns elements by ID\n\t\t\tsupport.getByName = assert(function (div) {\n\t\t\t\t// Inject content\n\t\t\t\tdiv.id = expando + 0;\n\t\t\t\tdiv.innerHTML = "<a name=\'" + expando + "\'></a><div name=\'" + expando + "\'></div>";\n\t\t\t\tdocElem.insertBefore(div, docElem.firstChild);\n\n\t\t\t\t// Test\n\t\t\t\tvar pass = doc.getElementsByName &&\n\t\t\t\t// buggy browsers will return fewer than the correct 2\n\t\t\t\tdoc.getElementsByName(expando).length === 2 +\n\t\t\t\t// buggy browsers will return more than the correct 0\n\t\t\t\tdoc.getElementsByName(expando + 0).length;\n\t\t\t\tsupport.getIdNotName = !doc.getElementById(expando);\n\n\t\t\t\t// Cleanup\n\t\t\t\tdocElem.removeChild(div);\n\n\t\t\t\treturn pass;\n\t\t\t});\n\n\t\t\t// IE6/7 return modified attributes\n\t\t\tExpr.attrHandle = assert(function (div) {\n\t\t\t\tdiv.innerHTML = "<a href=\'#\'></a>";\n\t\t\t\treturn div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute("href") === "#";\n\t\t\t}) ? {} : {\n\t\t\t\t"href": function (elem) {\n\t\t\t\t\treturn elem.getAttribute("href", 2);\n\t\t\t\t},\n\t\t\t\t"type": function (elem) {\n\t\t\t\t\treturn elem.getAttribute("type");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// ID find and filter\n\t\t\tif (support.getIdNotName) {\n\t\t\t\tExpr.find["ID"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== strundefined && !documentIsXML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\treturn m && m.parentNode ? [m] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter["ID"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute("id") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tExpr.find["ID"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== strundefined && !documentIsXML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\n\t\t\t\t\t\treturn m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ? [m] : undefined : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter["ID"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find["TAG"] = support.tagNameNoComments ? function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByTagName !== strundefined) {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\t\t\t\t    results = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === "*") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Name\n\t\t\tExpr.find["NAME"] = support.getByName && function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByName !== strundefined) {\n\t\t\t\t\treturn context.getElementsByName(name);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find["CLASS"] = support.getByClassName && function (className, context) {\n\t\t\t\tif (typeof context.getElementsByClassName !== strundefined && !documentIsXML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21),\n\t\t\t// no need to also add to buggyMatches since matches checks buggyQSA\n\t\t\t// A support test would require too much code (would include document ready)\n\t\t\trbuggyQSA = [":focus"];\n\n\t\t\tif (support.qsa = isNative(doc.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE\'s treatment of not explictly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdiv.innerHTML = "<select><option selected=\'\'></option></select>";\n\n\t\t\t\t\t// IE8 - Some boolean attributes are not treated correctly\n\t\t\t\t\tif (!div.querySelectorAll("[selected]").length) {\n\t\t\t\t\t\trbuggyQSA.push("\\\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(":checked").length) {\n\t\t\t\t\t\trbuggyQSA.push(":checked");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (div) {\n\n\t\t\t\t\t// Opera 10-12/IE8 - ^= $= *= and empty values\n\t\t\t\t\t// Should not select anything\n\t\t\t\t\tdiv.innerHTML = "<input type=\'hidden\' i=\'\'/>";\n\t\t\t\t\tif (div.querySelectorAll("[i^=\'\']").length) {\n\t\t\t\t\t\trbuggyQSA.push("[*^$]=" + whitespace + "*(?:\\"\\"|\'\')");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(":enabled").length) {\n\t\t\t\t\t\trbuggyQSA.push(":enabled", ":disabled");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tdiv.querySelectorAll("*,:x");\n\t\t\t\t\trbuggyQSA.push(",.*:");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = isNative(matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Check to see if it\'s possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(div, "div");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(div, "[s!=\'\']:x");\n\t\t\t\t\trbuggyMatches.push("!=", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = new RegExp(rbuggyQSA.join("|"));\n\t\t\trbuggyMatches = new RegExp(rbuggyMatches.join("|"));\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully does not implement inclusive descendent\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = docElem.compareDocumentPosition ? function (a, b) {\n\t\t\t\tvar compare;\n\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tif (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b)) {\n\t\t\t\t\tif (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {\n\t\t\t\t\t\tif (a === doc || contains(preferredDoc, a)) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (b === doc || contains(preferredDoc, b)) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t\t}\n\n\t\t\t\treturn a.compareDocumentPosition ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\n\t\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\t} else if (!aup || !bup) {\n\t\t\t\t\treturn a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\t// Always assume the presence of duplicates if sort doesn\'t\n\t\t\t// pass them to our comparison function (as in Google Chrome).\n\t\t\thasDuplicate = false;\n\t\t\t[0, 0].sort(sortOrder);\n\t\t\tsupport.detectDuplicates = hasDuplicate;\n\n\t\t\treturn document;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, "=\'$1\']");\n\n\t\t\t// rbuggyQSA always contains :focus, so no need for an existence check\n\t\t\tif (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9\'s matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\tvar val;\n\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tif (!documentIsXML) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t}\n\t\t\tif (val = Expr.attrHandle[name]) {\n\t\t\t\treturn val(elem);\n\t\t\t}\n\t\t\tif (documentIsXML || support.attributes) {\n\t\t\t\treturn elem.getAttribute(name);\n\t\t\t}\n\t\t\treturn ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ? name : val && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error("Syntax error, unrecognized expression: " + msg);\n\t\t};\n\n\t\t// Document sorting and removing duplicates\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    i = 1,\n\t\t\t    j = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\tfor (; elem = results[i]; i++) {\n\t\t\t\t\tif (elem === results[i - 1]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn results;\n\t\t};\n\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t// Returns a function to use in pseudos for input types\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === "input" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t// Returns a function to use in pseudos for buttons\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === "input" || name === "button") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t// Returns a function to use in pseudos for positionals\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = "",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\tfor (; node = elem[i]; i++) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (see #11153)\n\t\t\t\tif (typeof elem.textContent === "string") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t">": { dir: "parentNode", first: true },\n\t\t\t\t" ": { dir: "parentNode" },\n\t\t\t\t"+": { dir: "previousSibling", first: true },\n\t\t\t\t"~": { dir: "previousSibling" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t"ATTR": function (match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[4] || match[5] || "").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === "~=") {\n\t\t\t\t\t\tmatch[3] = " " + match[3] + " ";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t"CHILD": function (match) {\n\t\t\t\t\t/* matches from matchExpr["CHILD"]\n     \t1 type (only|nth|...)\n     \t2 what (child|of-type)\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n     \t5 sign of xn-component\n     \t6 x of xn-component\n     \t7 sign of y-component\n     \t8 y of y-component\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === "nth") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === "odd");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t"PSEUDO": function (match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[5] && match[2];\n\n\t\t\t\t\tif (matchExpr["CHILD"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[4]) {\n\t\t\t\t\t\tmatch[2] = match[4];\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t"TAG": function (nodeName) {\n\t\t\t\t\tif (nodeName === "*") {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tnodeName = nodeName.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t"CLASS": function (className) {\n\t\t\t\t\tvar pattern = classCache[className + " "];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t"ATTR": function (name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === "!=";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += "";\n\n\t\t\t\t\t\treturn operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t"CHILD": function (type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== "nth",\n\t\t\t\t\t    forward = type.slice(-4) !== "last",\n\t\t\t\t\t    ofType = what === "of-type";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    diff,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? "nextSibling" : "previousSibling",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven\'t yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === "only" && !start && "nextSibling";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\t\touterCache = parent[expando] || (parent[expando] = {});\n\t\t\t\t\t\t\t\tcache = outerCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\touterCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n\t\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t"PSEUDO": function (pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, "", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf.call(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t"not": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, "$1"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t"has": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t"contains": markFunction(function (text) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// "Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element\'s language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by "-".\n\t\t\t\t// The matching of C against the element\'s language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name."\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t"lang": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifider\n\t\t\t\t\tif (!ridentifier.test(lang || "")) {\n\t\t\t\t\t\tSizzle.error("unsupported lang: " + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsXML ? elem.getAttribute("xml:lang") || elem.getAttribute("lang") : elem.lang) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t"target": function (elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t"root": function (elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t"focus": function (elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t"enabled": function (elem) {\n\t\t\t\t\treturn elem.disabled === false;\n\t\t\t\t},\n\n\t\t\t\t"disabled": function (elem) {\n\t\t\t\t\treturn elem.disabled === true;\n\t\t\t\t},\n\n\t\t\t\t"checked": function (elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t"selected": function (elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t"empty": function (elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),\n\t\t\t\t\t//   not comment, processing instructions, or others\n\t\t\t\t\t// Thanks to Diego Perini for the nodeName shortcut\n\t\t\t\t\t//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t"parent": function (elem) {\n\t\t\t\t\treturn !Expr.pseudos["empty"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t"header": function (elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t"input": function (elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t"button": function (elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === "input" && elem.type === "button" || name === "button";\n\t\t\t\t},\n\n\t\t\t\t"text": function (elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\t// IE6 and 7 will map elem.type to \'text\' for new HTML5 types (search, etc)\n\t\t\t\t\t// use getAttribute instead to test this case\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t"first": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t"last": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t"eq": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t"even": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t"odd": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t"lt": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t"gt": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\tfunction tokenize(selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + " "];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don\'t consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, " ")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we\'re just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t}\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = "";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    checkNonElements = base && dir === "parentNode",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar data,\n\t\t\t\t    cache,\n\t\t\t\t    outerCache,\n\t\t\t\t    dirkey = dirruns + " " + doneName;\n\n\t\t\t\t// We can\'t set arbitrary data on XML nodes, so they don\'t benefit from dir caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\t\t\t\t\t\t\tif ((cache = outerCache[dir]) && cache[0] === dirkey) {\n\t\t\t\t\t\t\t\tif ((data = cache[1]) === true || data === cachedruns) {\n\t\t\t\t\t\t\t\t\treturn data === true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcache = outerCache[dir] = [dirkey];\n\t\t\t\t\t\t\t\tcache[1] = matcher(elem, context, xml) || cachedruns;\n\t\t\t\t\t\t\t\tif (cache[1] === true) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[" "],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf.call(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\treturn !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\t// A counter to specify which element is currently being matched\n\t\t\tvar matcherCachedRuns = 0,\n\t\t\t    bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function (seed, context, xml, results, expandContext) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    setMatched = [],\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = "0",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    outermost = expandContext != null,\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or context\n\t\t\t\telems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context !== document && context;\n\t\t\t\t\tcachedruns = matcherCachedRuns;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be "00" below\n\t\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t\tcachedruns = ++matcherCachedRuns;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\tmatchedCount += i;\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, group /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + " "];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!group) {\n\t\t\t\t\tgroup = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = group.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(group[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction select(selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    match = tokenize(selector);\n\n\t\t\tif (!seed) {\n\t\t\t\t// Try to minimize operations if there is only one group\n\t\t\t\tif (match.length === 1) {\n\n\t\t\t\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && !documentIsXML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\t\tcontext = Expr.find["ID"](token.matches[0].replace(runescape, funescape), context)[0];\n\t\t\t\t\t\tif (!context) {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\t\ti = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {\n\n\t\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\t\tpush.apply(results, slice.call(seed, 0));\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\tcompile(selector, match)(seed, context, documentIsXML, results, rsibling.test(selector));\n\t\t\treturn results;\n\t\t}\n\n\t\t// Deprecated\n\t\tExpr.pseudos["nth"] = Expr.pseudos["eq"];\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tExpr.filters = setFilters.prototype = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\t// Initialize with the default document\n\t\tsetDocument();\n\n\t\t// Override sizzle attribute retrieval\n\t\tSizzle.attr = jQuery.attr;\n\t\tjQuery.find = Sizzle;\n\t\tjQuery.expr = Sizzle.selectors;\n\t\tjQuery.expr[":"] = jQuery.expr.pseudos;\n\t\tjQuery.unique = Sizzle.uniqueSort;\n\t\tjQuery.text = Sizzle.getText;\n\t\tjQuery.isXMLDoc = Sizzle.isXML;\n\t\tjQuery.contains = Sizzle.contains;\n\t})(window);\n\tvar runtil = /Until$/,\n\t    rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\t    isSimple = /^.[^:#\\[\\.,]*$/,\n\t    rneedsContext = jQuery.expr.match.needsContext,\n\n\t// methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function (selector) {\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    self,\n\t\t\t    len = this.length;\n\n\t\t\tif (typeof selector !== "string") {\n\t\t\t\tself = this;\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tret = [];\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, this[i], ret);\n\t\t\t}\n\n\t\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\t\tret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n\t\t\tret.selector = (this.selector ? this.selector + " " : "") + selector;\n\t\t\treturn ret;\n\t\t},\n\n\t\thas: function (target) {\n\t\t\tvar i,\n\t\t\t    targets = jQuery(target, this),\n\t\t\t    len = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tnot: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector, false));\n\t\t},\n\n\t\tfilter: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector, true));\n\t\t},\n\n\t\tis: function (selector) {\n\t\t\treturn !!selector && (typeof selector === "string" ?\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n\t\t\trneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);\n\t\t},\n\n\t\tclosest: function (selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    ret = [],\n\t\t\t    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tcur = this[i];\n\n\t\t\t\twhile (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {\n\t\t\t\t\tif (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {\n\t\t\t\t\t\tret.push(cur);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);\n\t\t},\n\n\t\t// Determine the position of an element within\n\t\t// the matched set of elements\n\t\tindex: function (elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// index in selector\n\t\t\tif (typeof elem === "string") {\n\t\t\t\treturn jQuery.inArray(this[0], jQuery(elem));\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn jQuery.inArray(\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem, this);\n\t\t},\n\n\t\tadd: function (selector, context) {\n\t\t\tvar set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),\n\t\t\t    all = jQuery.merge(this.get(), set);\n\n\t\t\treturn this.pushStack(jQuery.unique(all));\n\t\t},\n\n\t\taddBack: function (selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tjQuery.fn.andSelf = jQuery.fn.addBack;\n\n\tfunction sibling(cur, dir) {\n\t\tdo {\n\t\t\tcur = cur[dir];\n\t\t} while (cur && cur.nodeType !== 1);\n\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function (elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function (elem) {\n\t\t\treturn jQuery.dir(elem, "parentNode");\n\t\t},\n\t\tparentsUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, "parentNode", until);\n\t\t},\n\t\tnext: function (elem) {\n\t\t\treturn sibling(elem, "nextSibling");\n\t\t},\n\t\tprev: function (elem) {\n\t\t\treturn sibling(elem, "previousSibling");\n\t\t},\n\t\tnextAll: function (elem) {\n\t\t\treturn jQuery.dir(elem, "nextSibling");\n\t\t},\n\t\tprevAll: function (elem) {\n\t\t\treturn jQuery.dir(elem, "previousSibling");\n\t\t},\n\t\tnextUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, "nextSibling", until);\n\t\t},\n\t\tprevUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, "previousSibling", until);\n\t\t},\n\t\tsiblings: function (elem) {\n\t\t\treturn jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function (elem) {\n\t\t\treturn jQuery.sibling(elem.firstChild);\n\t\t},\n\t\tcontents: function (elem) {\n\t\t\treturn jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar ret = jQuery.map(this, fn, until);\n\n\t\t\tif (!runtil.test(name)) {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === "string") {\n\t\t\t\tret = jQuery.filter(selector, ret);\n\t\t\t}\n\n\t\t\tret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;\n\n\t\t\tif (this.length > 1 && rparentsprev.test(name)) {\n\t\t\t\tret = ret.reverse();\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tjQuery.extend({\n\t\tfilter: function (expr, elems, not) {\n\t\t\tif (not) {\n\t\t\t\texpr = ":not(" + expr + ")";\n\t\t\t}\n\n\t\t\treturn elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);\n\t\t},\n\n\t\tdir: function (elem, dir, until) {\n\t\t\tvar matched = [],\n\t\t\t    cur = elem[dir];\n\n\t\t\twhile (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {\n\t\t\t\tif (cur.nodeType === 1) {\n\t\t\t\t\tmatched.push(cur);\n\t\t\t\t}\n\t\t\t\tcur = cur[dir];\n\t\t\t}\n\t\t\treturn matched;\n\t\t},\n\n\t\tsibling: function (n, elem) {\n\t\t\tvar r = [];\n\n\t\t\tfor (; n; n = n.nextSibling) {\n\t\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\t\tr.push(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn r;\n\t\t}\n\t});\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, keep) {\n\n\t\t// Can\'t pass null or undefined to indexOf in Firefox 4\n\t\t// Set to 0 to skip string check\n\t\tqualifier = qualifier || 0;\n\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\tvar retVal = !!qualifier.call(elem, i, elem);\n\t\t\t\treturn retVal === keep;\n\t\t\t});\n\t\t} else if (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier === keep;\n\t\t\t});\n\t\t} else if (typeof qualifier === "string") {\n\t\t\tvar filtered = jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem.nodeType === 1;\n\t\t\t});\n\n\t\t\tif (isSimple.test(qualifier)) {\n\t\t\t\treturn jQuery.filter(qualifier, filtered, !keep);\n\t\t\t} else {\n\t\t\t\tqualifier = jQuery.filter(qualifier, filtered);\n\t\t\t}\n\t\t}\n\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn jQuery.inArray(elem, qualifier) >= 0 === keep;\n\t\t});\n\t}\n\tfunction createSafeFragment(document) {\n\t\tvar list = nodeNames.split("|"),\n\t\t    safeFrag = document.createDocumentFragment();\n\n\t\tif (safeFrag.createElement) {\n\t\t\twhile (list.length) {\n\t\t\t\tsafeFrag.createElement(list.pop());\n\t\t\t}\n\t\t}\n\t\treturn safeFrag;\n\t}\n\n\tvar nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",\n\t    rinlinejQuery = / jQuery\\d+="(?:null|\\d+)"/g,\n\t    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\\\s/>]", "i"),\n\t    rleadingWhitespace = /^\\s+/,\n\t    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\t    rtagName = /<([\\w:]+)/,\n\t    rtbody = /<tbody/i,\n\t    rhtml = /<|&#?\\w+;/,\n\t    rnoInnerhtml = /<(?:script|style|link)/i,\n\t    manipulation_rcheckableType = /^(?:checkbox|radio)$/i,\n\n\t// checked="checked" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptType = /^$|\\/(?:java|ecma)script/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\t\toption: [1, "<select multiple=\'multiple\'>", "</select>"],\n\t\tlegend: [1, "<fieldset>", "</fieldset>"],\n\t\tarea: [1, "<map>", "</map>"],\n\t\tparam: [1, "<object>", "</object>"],\n\t\tthead: [1, "<table>", "</table>"],\n\t\ttr: [2, "<table><tbody>", "</tbody></table>"],\n\t\tcol: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],\n\t\ttd: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n\n\t\t// IE6-8 can\'t serialize link, script, style, or any html5 (NoScope) tags,\n\t\t// unless wrapped in a div with non-breaking characters in front of it.\n\t\t_default: jQuery.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]\n\t},\n\t    safeFragment = createSafeFragment(document),\n\t    fragmentDiv = safeFragment.appendChild(document.createElement("div"));\n\n\twrapMap.optgroup = wrapMap.option;\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\tjQuery.fn.extend({\n\t\ttext: function (value) {\n\t\t\treturn jQuery.access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\twrapAll: function (html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapAll(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this[0]) {\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\tvar wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstChild && elem.firstChild.nodeType === 1) {\n\t\t\t\t\t\telem = elem.firstChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function (html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function (html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function () {\n\t\t\treturn this.parent().each(function () {\n\t\t\t\tif (!jQuery.nodeName(this, "body")) {\n\t\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t\t}\n\t\t\t}).end();\n\t\t},\n\n\t\tappend: function () {\n\t\t\treturn this.domManip(arguments, true, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tthis.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function () {\n\t\t\treturn this.domManip(arguments, true, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tthis.insertBefore(elem, this.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function () {\n\t\t\treturn this.domManip(arguments, false, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function () {\n\t\t\treturn this.domManip(arguments, false, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// keepData is for internal use only--do not document\n\t\tremove: function (selector, keepData) {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\tif (!selector || jQuery.filter(selector, [elem]).length > 0) {\n\t\t\t\t\tif (!keepData && elem.nodeType === 1) {\n\t\t\t\t\t\tjQuery.cleanData(getAll(elem));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\tif (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\t\t\tsetGlobalEval(getAll(elem, "script"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.parentNode.removeChild(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tempty: function () {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t}\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\twhile (elem.firstChild) {\n\t\t\t\t\telem.removeChild(elem.firstChild);\n\t\t\t\t}\n\n\t\t\t\t// If this is a select, ensure that it displays empty (#12336)\n\t\t\t\t// Support: IE<9\n\t\t\t\tif (elem.options && jQuery.nodeName(elem, "select")) {\n\t\t\t\t\telem.options.length = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function (dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function (value) {\n\t\t\treturn jQuery.access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = value.replace(rxhtmlTag, "<$1></$2>");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\telem = this[i] || {};\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function (value) {\n\t\t\tvar isFunc = jQuery.isFunction(value);\n\n\t\t\t// Make sure that the elements are removed from the DOM before they are inserted\n\t\t\t// this can help fix replacing a parent with child elements\n\t\t\tif (!isFunc && typeof value !== "string") {\n\t\t\t\tvalue = jQuery(value).not(this).detach();\n\t\t\t}\n\n\t\t\treturn this.domManip([value], true, function (elem) {\n\t\t\t\tvar next = this.nextSibling,\n\t\t\t\t    parent = this.parentNode;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tjQuery(this).remove();\n\t\t\t\t\tparent.insertBefore(elem, next);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tdetach: function (selector) {\n\t\t\treturn this.remove(selector, true);\n\t\t},\n\n\t\tdomManip: function (args, table, callback) {\n\n\t\t\t// Flatten any nested arrays\n\t\t\targs = core_concat.apply([], args);\n\n\t\t\tvar first,\n\t\t\t    node,\n\t\t\t    hasScripts,\n\t\t\t    scripts,\n\t\t\t    doc,\n\t\t\t    fragment,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    set = this,\n\t\t\t    iNoClone = l - 1,\n\t\t\t    value = args[0],\n\t\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t\t// We can\'t cloneNode fragments that contain checked, in WebKit\n\t\t\tif (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {\n\t\t\t\treturn this.each(function (index) {\n\t\t\t\t\tvar self = set.eq(index);\n\t\t\t\t\tif (isFunction) {\n\t\t\t\t\t\targs[0] = value.call(this, index, table ? self.html() : undefined);\n\t\t\t\t\t}\n\t\t\t\t\tself.domManip(args, table, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (l) {\n\t\t\t\tfragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n\t\t\t\tfirst = fragment.firstChild;\n\n\t\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\t\tfragment = first;\n\t\t\t\t}\n\n\t\t\t\tif (first) {\n\t\t\t\t\ttable = table && jQuery.nodeName(first, "tr");\n\t\t\t\t\tscripts = jQuery.map(getAll(fragment, "script"), disableScript);\n\t\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, "script"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcallback.call(table && jQuery.nodeName(this[i], "table") ? findOrAppend(this[i], "tbody") : this[i], node, i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t\t// Reenable scripts\n\t\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\t\tif (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\t\tif (node.src) {\n\t\t\t\t\t\t\t\t\t// Hope ajax is available...\n\t\t\t\t\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\t\t\t\t\turl: node.src,\n\t\t\t\t\t\t\t\t\t\ttype: "GET",\n\t\t\t\t\t\t\t\t\t\tdataType: "script",\n\t\t\t\t\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\t\t\t\t\tglobal: false,\n\t\t\t\t\t\t\t\t\t\t"throws": true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix #11809: Avoid leaking memory\n\t\t\t\t\tfragment = first = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction findOrAppend(elem, tag) {\n\t\treturn elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\tvar attr = elem.getAttributeNode("type");\n\t\telem.type = (attr && attr.specified) + "/" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute("type");\n\t\t}\n\t\treturn elem;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar elem,\n\t\t    i = 0;\n\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\tjQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));\n\t\t}\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\n\t\tif (dest.nodeType !== 1 || !jQuery.hasData(src)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar type,\n\t\t    i,\n\t\t    l,\n\t\t    oldData = jQuery._data(src),\n\t\t    curData = jQuery._data(dest, oldData),\n\t\t    events = oldData.events;\n\n\t\tif (events) {\n\t\t\tdelete curData.handle;\n\t\t\tcurData.events = {};\n\n\t\t\tfor (type in events) {\n\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// make the cloned public data object a copy from the original\n\t\tif (curData.data) {\n\t\t\tcurData.data = jQuery.extend({}, curData.data);\n\t\t}\n\t}\n\n\tfunction fixCloneNodeIssues(src, dest) {\n\t\tvar nodeName, e, data;\n\n\t\t// We do not need to do anything for non-Elements\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tnodeName = dest.nodeName.toLowerCase();\n\n\t\t// IE6-8 copies events bound via attachEvent when using cloneNode.\n\t\tif (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {\n\t\t\tdata = jQuery._data(dest);\n\n\t\t\tfor (e in data.events) {\n\t\t\t\tjQuery.removeEvent(dest, e, data.handle);\n\t\t\t}\n\n\t\t\t// Event data gets referenced instead of copied if the expando gets copied too\n\t\t\tdest.removeAttribute(jQuery.expando);\n\t\t}\n\n\t\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\t\tif (nodeName === "script" && dest.text !== src.text) {\n\t\t\tdisableScript(dest).text = src.text;\n\t\t\trestoreScript(dest);\n\n\t\t\t// IE6-10 improperly clones children of object elements using classid.\n\t\t\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\n\t\t} else if (nodeName === "object") {\n\t\t\tif (dest.parentNode) {\n\t\t\t\tdest.outerHTML = src.outerHTML;\n\t\t\t}\n\n\t\t\t// This path appears unavoidable for IE9. When cloning an object\n\t\t\t// element in IE9, the outerHTML strategy above is not sufficient.\n\t\t\t// If the src has innerHTML and the destination does not,\n\t\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\n\t\t\tif (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {\n\t\t\t\tdest.innerHTML = src.innerHTML;\n\t\t\t}\n\t\t} else if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {\n\t\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\n\t\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\n\t\t\t// a checked appearance if the defaultChecked value isn\'t also set\n\n\t\t\tdest.defaultChecked = dest.checked = src.checked;\n\n\t\t\t// IE6-7 get confused and end up setting the value of a cloned\n\t\t\t// checkbox/radio button to an empty string instead of "on"\n\t\t\tif (dest.value !== src.value) {\n\t\t\t\tdest.value = src.value;\n\t\t\t}\n\n\t\t\t// IE6-8 fails to return the selected option to the default selected\n\t\t\t// state when cloning options\n\t\t} else if (nodeName === "option") {\n\t\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\n\n\t\t\t// IE6-8 fails to set the defaultValue to the correct value when\n\t\t\t// cloning other types of input fields\n\t\t} else if (nodeName === "input" || nodeName === "textarea") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tjQuery.each({\n\t\tappendTo: "append",\n\t\tprependTo: "prepend",\n\t\tinsertBefore: "before",\n\t\tinsertAfter: "after",\n\t\treplaceAll: "replaceWith"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    i = 0,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\t\t\t\tcore_push.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tfunction getAll(context, tag) {\n\t\tvar elems,\n\t\t    elem,\n\t\t    i = 0,\n\t\t    found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") : undefined;\n\n\t\tif (!found) {\n\t\t\tfor (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {\n\t\t\t\tif (!tag || jQuery.nodeName(elem, tag)) {\n\t\t\t\t\tfound.push(elem);\n\t\t\t\t} else {\n\t\t\t\t\tjQuery.merge(found, getAll(elem, tag));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;\n\t}\n\n\t// Used in buildFragment, fixes the defaultChecked property\n\tfunction fixDefaultChecked(elem) {\n\t\tif (manipulation_rcheckableType.test(elem.type)) {\n\t\t\telem.defaultChecked = elem.checked;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tclone: function (elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar destElements,\n\t\t\t    node,\n\t\t\t    clone,\n\t\t\t    i,\n\t\t\t    srcElements,\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\tif (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {\n\t\t\t\tclone = elem.cloneNode(true);\n\n\t\t\t\t// IE<=8 does not properly clone detached, unknown element nodes\n\t\t\t} else {\n\t\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\n\t\t\t\tfragmentDiv.removeChild(clone = fragmentDiv.firstChild);\n\t\t\t}\n\n\t\t\tif ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\t// Fix all IE cloning issues\n\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; ++i) {\n\t\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\n\t\t\t\t\tif (destElements[i]) {\n\t\t\t\t\t\tfixCloneNodeIssues(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; i++) {\n\t\t\t\t\t\tcloneCopyEvent(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, "script");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, "script"));\n\t\t\t}\n\n\t\t\tdestElements = srcElements = node = null;\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tbuildFragment: function (elems, context, scripts, selection) {\n\t\t\tvar j,\n\t\t\t    elem,\n\t\t\t    contains,\n\t\t\t    tmp,\n\t\t\t    tag,\n\t\t\t    tbody,\n\t\t\t    wrap,\n\t\t\t    l = elems.length,\n\n\n\t\t\t// Ensure a safe fragment\n\t\t\tsafe = createSafeFragment(context),\n\t\t\t    nodes = [],\n\t\t\t    i = 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\telem = elems[i];\n\n\t\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t\t// Add nodes directly\n\t\t\t\t\tif (jQuery.type(elem) === "object") {\n\t\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = tmp || safe.appendChild(context.createElement("div"));\n\n\t\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\t\ttag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n\t\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\n\t\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];\n\n\t\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\t\tj = wrap[0];\n\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Manually add leading whitespace removed by IE\n\t\t\t\t\t\tif (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {\n\t\t\t\t\t\t\tnodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove IE\'s autoinserted <tbody> from table fragments\n\t\t\t\t\t\tif (!jQuery.support.tbody) {\n\n\t\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\n\t\t\t\t\t\t\telem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild :\n\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\n\t\t\t\t\t\t\twrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;\n\n\t\t\t\t\t\t\tj = elem && elem.childNodes.length;\n\t\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\t\tif (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {\n\t\t\t\t\t\t\t\t\telem.removeChild(tbody);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t\t// Fix #12392 for WebKit and IE > 9\n\t\t\t\t\t\ttmp.textContent = "";\n\n\t\t\t\t\t\t// Fix #12392 for oldIE\n\t\t\t\t\t\twhile (tmp.firstChild) {\n\t\t\t\t\t\t\ttmp.removeChild(tmp.firstChild);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remember the top-level container for proper cleanup\n\t\t\t\t\t\ttmp = safe.lastChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fix #11356: Clear elements from fragment\n\t\t\tif (tmp) {\n\t\t\t\tsafe.removeChild(tmp);\n\t\t\t}\n\n\t\t\t// Reset defaultChecked for any radios and checkboxes\n\t\t\t// about to be appended to the DOM in IE 6/7 (#8060)\n\t\t\tif (!jQuery.support.appendChecked) {\n\t\t\t\tjQuery.grep(getAll(nodes, "input"), fixDefaultChecked);\n\t\t\t}\n\n\t\t\ti = 0;\n\t\t\twhile (elem = nodes[i++]) {\n\n\t\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t\t// that element, do not do anything\n\t\t\t\tif (selection && jQuery.inArray(elem, selection) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t\t// Append to fragment\n\t\t\t\ttmp = getAll(safe.appendChild(elem), "script");\n\n\t\t\t\t// Preserve script evaluation history\n\t\t\t\tif (contains) {\n\t\t\t\t\tsetGlobalEval(tmp);\n\t\t\t\t}\n\n\t\t\t\t// Capture executables\n\t\t\t\tif (scripts) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\t\tif (rscriptType.test(elem.type || "")) {\n\t\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp = null;\n\n\t\t\treturn safe;\n\t\t},\n\n\t\tcleanData: function (elems, /* internal */acceptData) {\n\t\t\tvar elem,\n\t\t\t    type,\n\t\t\t    id,\n\t\t\t    data,\n\t\t\t    i = 0,\n\t\t\t    internalKey = jQuery.expando,\n\t\t\t    cache = jQuery.cache,\n\t\t\t    deleteExpando = jQuery.support.deleteExpando,\n\t\t\t    special = jQuery.event.special;\n\n\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\n\t\t\t\tif (acceptData || jQuery.acceptData(elem)) {\n\n\t\t\t\t\tid = elem[internalKey];\n\t\t\t\t\tdata = id && cache[id];\n\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove\'s overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\n\t\t\t\t\t\tif (cache[id]) {\n\n\t\t\t\t\t\t\tdelete cache[id];\n\n\t\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,\n\t\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;\n\t\t\t\t\t\t\t// we must handle all of these cases\n\t\t\t\t\t\t\tif (deleteExpando) {\n\t\t\t\t\t\t\t\tdelete elem[internalKey];\n\t\t\t\t\t\t\t} else if (typeof elem.removeAttribute !== core_strundefined) {\n\t\t\t\t\t\t\t\telem.removeAttribute(internalKey);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\telem[internalKey] = null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcore_deletedIds.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar iframe,\n\t    getStyles,\n\t    curCSS,\n\t    ralpha = /alpha\\([^)]*\\)/i,\n\t    ropacity = /opacity\\s*=\\s*([^)]*)/,\n\t    rposition = /^(top|right|bottom|left)$/,\n\n\t// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    rmargin = /^margin/,\n\t    rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),\n\t    rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),\n\t    rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"),\n\t    elemdisplay = { BODY: "block" },\n\t    cssShow = { position: "absolute", visibility: "hidden", display: "block" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: 0,\n\t\tfontWeight: 400\n\t},\n\t    cssExpand = ["Top", "Right", "Bottom", "Left"],\n\t    cssPrefixes = ["Webkit", "O", "Moz", "ms"];\n\n\t// return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(style, name) {\n\n\t\t// shortcut for names that are not vendor prefixed\n\t\tif (name in style) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// check for vendor prefixed names\n\t\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),\n\t\t    origName = name,\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in style) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\treturn origName;\n\t}\n\n\tfunction isHidden(elem, el) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    hidden,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalues[index] = jQuery._data(elem, "olddisplay");\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\t\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t\t// being hidden by cascaded rules or not\n\t\t\t\tif (!values[index] && display === "none") {\n\t\t\t\t\telem.style.display = "";\n\t\t\t\t}\n\n\t\t\t\t// Set elements which have been overridden with display: none\n\t\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t\t// for such an element\n\t\t\t\tif (elem.style.display === "" && isHidden(elem)) {\n\t\t\t\t\tvalues[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (!values[index]) {\n\t\t\t\t\thidden = isHidden(elem);\n\n\t\t\t\t\tif (display && display !== "none" || !hidden) {\n\t\t\t\t\t\tjQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of most of the elements in a second loop\n\t\t// to avoid the constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!show || elem.style.display === "none" || elem.style.display === "") {\n\t\t\t\telem.style.display = show ? values[index] || "" : "none";\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tjQuery.fn.extend({\n\t\tcss: function (name, value) {\n\t\t\treturn jQuery.access(this, function (elem, name, value) {\n\t\t\t\tvar len,\n\t\t\t\t    styles,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (jQuery.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t},\n\t\tshow: function () {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function () {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function (state) {\n\t\t\tvar bool = typeof state === "boolean";\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (bool ? state : isHidden(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function (elem, computed) {\n\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, "opacity");\n\t\t\t\t\t\treturn ret === "" ? "1" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Exclude the following css properties to add px\n\t\tcssNumber: {\n\t\t\t"columnCount": true,\n\t\t\t"fillOpacity": true,\n\t\t\t"fontWeight": true,\n\t\t\t"lineHeight": true,\n\t\t\t"opacity": true,\n\t\t\t"orphans": true,\n\t\t\t"widows": true,\n\t\t\t"zIndex": true,\n\t\t\t"zoom": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t// normalize float css property\n\t\t\t"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function (elem, name, value, extra) {\n\t\t\t// Don\'t set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we\'re working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    style = elem.style;\n\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we\'re setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value;\n\n\t\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345\n\t\t\t\tif (type === "string" && (ret = rrelNum.exec(value))) {\n\t\t\t\t\tvalue = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = "number";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that NaN and null values aren\'t set. See: #7116\n\t\t\t\tif (value == null || type === "number" && isNaN(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number was passed in, add \'px\' to the (except for certain CSS properties)\n\t\t\t\tif (type === "number" && !jQuery.cssNumber[origName]) {\n\t\t\t\t\tvalue += "px";\n\t\t\t\t}\n\n\t\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n\t\t\t\t// but it would mean to define eight (for every problematic property) identical functions\n\t\t\t\tif (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n\t\t\t\t\tstyle[name] = "inherit";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\n\t\t\t\t\t// Wrapped to prevent IE from throwing errors when \'invalid\' values are provided\n\t\t\t\t\t// Fixes bug #5509\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstyle[name] = value;\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function (elem, name, extra, styles) {\n\t\t\tvar num,\n\t\t\t    val,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name);\n\n\t\t\t// Make sure that we\'re working with the right name\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && "get" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t//convert "normal" to computed value\n\t\t\tif (val === "normal" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === "" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\n\t\t// A method for quickly swapping in/out CSS properties to get correct calculations\n\t\tswap: function (elem, options, callback, args) {\n\t\t\tvar ret,\n\t\t\t    name,\n\t\t\t    old = {};\n\n\t\t\t// Remember the old values, and insert the new ones\n\t\t\tfor (name in options) {\n\t\t\t\told[name] = elem.style[name];\n\t\t\t\telem.style[name] = options[name];\n\t\t\t}\n\n\t\t\tret = callback.apply(elem, args || []);\n\n\t\t\t// Revert the old values\n\t\t\tfor (name in options) {\n\t\t\t\telem.style[name] = old[name];\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\n\t// NOTE: we\'ve included the "window" in window.getComputedStyle\n\t// because jsdom on node.js will break without it.\n\tif (window.getComputedStyle) {\n\t\tgetStyles = function (elem) {\n\t\t\treturn window.getComputedStyle(elem, null);\n\t\t};\n\n\t\tcurCSS = function (elem, name, _computed) {\n\t\t\tvar width,\n\t\t\t    minWidth,\n\t\t\t    maxWidth,\n\t\t\t    computed = _computed || getStyles(elem),\n\n\n\t\t\t// getPropertyValue is only needed for .css(\'filter\') in IE9, see #12537\n\t\t\tret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,\n\t\t\t    style = elem.style;\n\n\t\t\tif (computed) {\n\n\t\t\t\tif (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t\t}\n\n\t\t\t\t// A tribute to the "awesome hack by Dean Edwards"\n\t\t\t\t// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right\n\t\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\t\tif (rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t\t// Remember the original values\n\t\t\t\t\twidth = style.width;\n\t\t\t\t\tminWidth = style.minWidth;\n\t\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\t\tret = computed.width;\n\n\t\t\t\t\t// Revert the changed values\n\t\t\t\t\tstyle.width = width;\n\t\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t};\n\t} else if (document.documentElement.currentStyle) {\n\t\tgetStyles = function (elem) {\n\t\t\treturn elem.currentStyle;\n\t\t};\n\n\t\tcurCSS = function (elem, name, _computed) {\n\t\t\tvar left,\n\t\t\t    rs,\n\t\t\t    rsLeft,\n\t\t\t    computed = _computed || getStyles(elem),\n\t\t\t    ret = computed ? computed[name] : undefined,\n\t\t\t    style = elem.style;\n\n\t\t\t// Avoid setting ret to empty string here\n\t\t\t// so we don\'t default to auto\n\t\t\tif (ret == null && style && style[name]) {\n\t\t\t\tret = style[name];\n\t\t\t}\n\n\t\t\t// From the awesome hack by Dean Edwards\n\t\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n\t\t\t// If we\'re not dealing with a regular pixel number\n\t\t\t// but a number that has a weird ending, we need to convert it to pixels\n\t\t\t// but not position css attributes, as those are proportional to the parent element instead\n\t\t\t// and we can\'t measure the parent instead because it might trigger a "stacking dolls" problem\n\t\t\tif (rnumnonpx.test(ret) && !rposition.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\tleft = style.left;\n\t\t\t\trs = elem.runtimeStyle;\n\t\t\t\trsLeft = rs && rs.left;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = elem.currentStyle.left;\n\t\t\t\t}\n\t\t\t\tstyle.left = name === "fontSize" ? "1em" : ret;\n\t\t\t\tret = style.pixelLeft + "px";\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.left = left;\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = rsLeft;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret === "" ? "auto" : ret;\n\t\t};\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\t\tvar matches = rnumsplit.exec(value);\n\t\treturn matches ?\n\t\t// Guard against undefined "subtract", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i = extra === (isBorderBox ? "border" : "content") ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === "width" ? 1 : 0,\n\t\t    val = 0;\n\n\t\tfor (; i < 4; i += 2) {\n\t\t\t// both box models exclude margin, so add it if we want it\n\t\t\tif (extra === "margin") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === "content") {\n\t\t\t\t\tval -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// at this point, extra isn\'t border nor margin, so remove border\n\t\t\t\tif (extra !== "margin") {\n\t\t\t\t\tval -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// at this point, extra isn\'t content, so add padding\n\t\t\t\tval += jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n\n\t\t\t\t// at this point, extra isn\'t content nor padding, so add border\n\t\t\t\tif (extra !== "padding") {\n\t\t\t\t\tval += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with offset property, which is equivalent to the border-box value\n\t\tvar valueIsBorderBox = true,\n\t\t    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,\n\t\t    styles = getStyles(elem),\n\t\t    isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";\n\n\t\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\t\tif (val <= 0 || val == null) {\n\t\t\t// Fall back to computed then uncomputed css if necessary\n\t\t\tval = curCSS(elem, name, styles);\n\t\t\tif (val < 0 || val == null) {\n\t\t\t\tval = elem.style[name];\n\t\t\t}\n\n\t\t\t// Computed unit is not pixels. Stop here and return.\n\t\t\tif (rnumnonpx.test(val)) {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// we need the check for style in case a browser which returns unreliable values\n\t\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\t\tvalueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);\n\n\t\t\t// Normalize "", auto, and prepare for extra\n\t\t\tval = parseFloat(val) || 0;\n\t\t}\n\n\t\t// use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";\n\t}\n\n\t// Try to determine the default display value of an element\n\tfunction css_defaultDisplay(nodeName) {\n\t\tvar doc = document,\n\t\t    display = elemdisplay[nodeName];\n\n\t\tif (!display) {\n\t\t\tdisplay = actualDisplay(nodeName, doc);\n\n\t\t\t// If the simple way fails, read from inside an iframe\n\t\t\tif (display === "none" || !display) {\n\t\t\t\t// Use the already-created iframe if possible\n\t\t\t\tiframe = (iframe || jQuery("<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);\n\n\t\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don\'t choke on reuse\n\t\t\t\tdoc = (iframe[0].contentWindow || iframe[0].contentDocument).document;\n\t\t\t\tdoc.write("<!doctype html><html><body>");\n\t\t\t\tdoc.close();\n\n\t\t\t\tdisplay = actualDisplay(nodeName, doc);\n\t\t\t\tiframe.detach();\n\t\t\t}\n\n\t\t\t// Store the correct default display\n\t\t\telemdisplay[nodeName] = display;\n\t\t}\n\n\t\treturn display;\n\t}\n\n\t// Called ONLY from within css_defaultDisplay\n\tfunction actualDisplay(name, doc) {\n\t\tvar elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n\t\t    display = jQuery.css(elem[0], "display");\n\t\telem.remove();\n\t\treturn display;\n\t}\n\n\tjQuery.each(["height", "width"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function (elem, computed, extra) {\n\t\t\t\tif (computed) {\n\t\t\t\t\t// certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// however, it must have a current display style that would benefit from this\n\t\t\t\t\treturn elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function (elem, value, extra) {\n\t\t\t\tvar styles = extra && getStyles(elem);\n\t\t\t\treturn setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);\n\t\t\t}\n\t\t};\n\t});\n\n\tif (!jQuery.support.opacity) {\n\t\tjQuery.cssHooks.opacity = {\n\t\t\tget: function (elem, computed) {\n\t\t\t\t// IE uses filters for opacity\n\t\t\t\treturn ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";\n\t\t\t},\n\n\t\t\tset: function (elem, value) {\n\t\t\t\tvar style = elem.style,\n\t\t\t\t    currentStyle = elem.currentStyle,\n\t\t\t\t    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",\n\t\t\t\t    filter = currentStyle && currentStyle.filter || style.filter || "";\n\n\t\t\t\t// IE has trouble with opacity if it does not have layout\n\t\t\t\t// Force it by setting the zoom level\n\t\t\t\tstyle.zoom = 1;\n\n\t\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n\t\t\t\t// if value === "", then remove inline opacity #12685\n\t\t\t\tif ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {\n\n\t\t\t\t\t// Setting style.filter to null, "" & " " still leave "filter:" in the cssText\n\t\t\t\t\t// if "filter:" is present at all, clearType is disabled, we want to avoid this\n\t\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\n\t\t\t\t\tstyle.removeAttribute("filter");\n\n\t\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done\n\t\t\t\t\tif (value === "" || currentStyle && !currentStyle.filter) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// otherwise, set new filter values\n\t\t\t\tstyle.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;\n\t\t\t}\n\t\t};\n\t}\n\n\t// These hooks cannot be added until DOM ready because the support test\n\t// for it is not run until after DOM ready\n\tjQuery(function () {\n\t\tif (!jQuery.support.reliableMarginRight) {\n\t\t\tjQuery.cssHooks.marginRight = {\n\t\t\t\tget: function (elem, computed) {\n\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\t\t\t// Work around by temporarily setting element display to inline-block\n\t\t\t\t\t\treturn jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t\t// getComputedStyle returns percent when specified for top/left/bottom/right\n\t\t// rather than make the css module depend on the offset module, we just check for it here\n\t\tif (!jQuery.support.pixelPosition && jQuery.fn.position) {\n\t\t\tjQuery.each(["top", "left"], function (i, prop) {\n\t\t\t\tjQuery.cssHooks[prop] = {\n\t\t\t\t\tget: function (elem, computed) {\n\t\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t\tcomputed = curCSS(elem, prop);\n\t\t\t\t\t\t\t// if curCSS returns percentage, fallback to offset\n\t\t\t\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t});\n\n\tif (jQuery.expr && jQuery.expr.filters) {\n\t\tjQuery.expr.filters.hidden = function (elem) {\n\t\t\t// Support: Opera <= 12.12\n\t\t\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t\t\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";\n\t\t};\n\n\t\tjQuery.expr.filters.visible = function (elem) {\n\t\t\treturn !jQuery.expr.filters.hidden(elem);\n\t\t};\n\t}\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: "",\n\t\tpadding: "",\n\t\tborder: "Width"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function (value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// assumes a single number if not a string\n\t\t\t\tparts = typeof value === "string" ? value.split(" ") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\tvar r20 = /%20/g,\n\t    rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tjQuery.fn.extend({\n\t\tserialize: function () {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function () {\n\t\t\treturn this.map(function () {\n\t\t\t\t// Can add propHook for "elements" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, "elements");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\t\t\t\t// Use .is(":disabled") so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\treturn val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, "\\r\\n") };\n\t\t\t\t}) : { name: elem.name, value: val.replace(rCRLF, "\\r\\n") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\t//Serialize an array of form elements or a set of\n\t//key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function (key, value) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction(value) ? value() : value == null ? "" : value;\n\t\t\ts[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);\n\t\t};\n\n\t\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\t\tif (traditional === undefined) {\n\t\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t\t}\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\t\t\t// If traditional, encode the "old" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join("&").replace(r20, "+");\n\t};\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (jQuery.isArray(obj)) {\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === "object") {\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\tjQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.hover = function (fnOver, fnOut) {\n\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t};\n\tvar\n\t// Document location\n\tajaxLocParts,\n\t    ajaxLocation,\n\t    ajax_nonce = jQuery.now(),\n\t    ajax_rquery = /\\?/,\n\t    rhash = /#.*$/,\n\t    rts = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n\t    // IE leaves an \\r character at EOL\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\t    rurl = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\n\t// Keep a copy of the old load method\n\t_load = jQuery.fn.load,\n\n\n\t/* Prefilters\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n  * 2) These are called:\n  *    - BEFORE asking for a transport\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\n  * 3) key is the dataType\n  * 4) the catchall symbol "*" can be used\n  * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\n  * 1) key is the dataType\n  * 2) the catchall symbol "*" can be used\n  * 3) selection will start with transport dataType and THEN go to "*" if needed\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = "*/".concat("*");\n\n\t// #8138, IE may throw an exception when accessing\n\t// a field from window.location if document.domain has been set\n\ttry {\n\t\tajaxLocation = location.href;\n\t} catch (e) {\n\t\t// Use the href attribute of an A element\n\t\t// since IE will modify it given document.location\n\t\tajaxLocation = document.createElement("a");\n\t\tajaxLocation.href = "";\n\t\tajaxLocation = ajaxLocation.href;\n\t}\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n\n\t// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to "*"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== "string") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = "*";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType[0] === "+") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || "*";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes "flat" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar deep,\n\t\t    key,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tif (typeof url !== "string" && _load) {\n\t\t\treturn _load.apply(this, arguments);\n\t\t}\n\n\t\tvar selector,\n\t\t    response,\n\t\t    type,\n\t\t    self = this,\n\t\t    off = url.indexOf(" ");\n\n\t\tif (off >= 0) {\n\t\t\tselector = url.slice(off, url.length);\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it\'s a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it\'s the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && typeof params === "object") {\n\t\t\ttype = "POST";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// if "type" variable is undefined, then "GET" method will be used\n\t\t\t\ttype: type,\n\t\t\t\tdataType: "html",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE \'Permission Denied\' errors\n\t\t\t\tjQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\t\t\t}).complete(callback && function (jqXHR, status) {\n\t\t\t\tself.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.each(["get", "post"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\t\t\t// shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\treturn jQuery.ajax({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t});\n\t\t};\n\t});\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: ajaxLocation,\n\t\t\ttype: "GET",\n\t\t\tisLocal: rlocalProtocol.test(ajaxLocParts[1]),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\t\t\t/*\n   timeout: 0,\n   data: null,\n   dataType: null,\n   username: null,\n   password: null,\n   cache: null,\n   throws: false,\n   traditional: false,\n   headers: {},\n   */\n\n\t\t\taccepts: {\n\t\t\t\t"*": allTypes,\n\t\t\t\ttext: "text/plain",\n\t\t\t\thtml: "text/html",\n\t\t\t\txml: "application/xml, text/xml",\n\t\t\t\tjson: "application/json, text/javascript"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /xml/,\n\t\t\t\thtml: /html/,\n\t\t\t\tjson: /json/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: "responseXML",\n\t\t\t\ttext: "responseText"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall "*") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t"* text": window.String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t"text html": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t"text json": jQuery.parseJSON,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t"text xml": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn\'t be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn\'t be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function (target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function (url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif (typeof url === "object") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar // Cross-domain detection vars\n\t\t\tparts,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers as string\n\t\t\tresponseHeadersString,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\t\t\t    transport,\n\n\t\t\t// Response headers\n\t\t\tresponseHeaders,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks("once memory"),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = "canceled",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function (key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (state === 2) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function () {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function (name, value) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\tname = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function (type) {\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function (map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[code] = [statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function (statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR).complete = completeDeferred.add;\n\t\t\tjqXHR.success = jqXHR.done;\n\t\t\tjqXHR.error = jqXHR.fail;\n\n\t\t\t// Remove hash character (#7531: and string promotion)\n\t\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];\n\n\t\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\tparts = rurl.exec(s.url.toLowerCase());\n\t\t\t\ts.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== "string") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (state === 2) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\tfireGlobals = s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger("ajaxStart");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we\'re toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\tcacheURL = s.url;\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL = s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data;\n\t\t\t\t\t// #9682: remove data so that it\'s not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add anti-cache in url if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\ts.url = rts.test(cacheURL) ?\n\n\t\t\t\t\t// If there is already a \'_\' parameter, set its value\n\t\t\t\t\tcacheURL.replace(rts, "$1_=" + ajax_nonce++) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader("Content-Type", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// aborting is no longer a cancellation\n\t\t\tstrAbort = "abort";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tfor (i in { success: 1, error: 1, complete: 1 }) {\n\t\t\t\tjqXHR[i](s[i]);\n\t\t\t}\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, "No Transport");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger("ajaxSend", [jqXHR, s]);\n\t\t\t\t}\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort("timeout");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tstate = 1;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Propagate exception as error if not done\n\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\tdone(-1, e);\n\t\t\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Called once\n\t\t\t\tif (state === 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// State is "done" now\n\t\t\t\tstate = 2;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\tclearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || "";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (status >= 200 && status < 300 || status === 304) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader("Last-Modified");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader("etag");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204) {\n\t\t\t\t\t\tisSuccess = true;\n\t\t\t\t\t\tstatusText = "nocontent";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tisSuccess = true;\n\t\t\t\t\t\tstatusText = "notmodified";\n\n\t\t\t\t\t\t// If we have data, let\'s convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisSuccess = ajaxConvert(s, response);\n\t\t\t\t\t\tstatusText = isSuccess.state;\n\t\t\t\t\t\tsuccess = isSuccess.data;\n\t\t\t\t\t\terror = isSuccess.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// We extract error from statusText\n\t\t\t\t\t// then normalize statusText and status for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = "error";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + "";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(statusCode);\n\t\t\t\tstatusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger("ajaxComplete", [jqXHR, s]);\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger("ajaxStop");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetScript: function (url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, "script");\n\t\t},\n\n\t\tgetJSON: function (url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, "json");\n\t\t}\n\t});\n\n\t/* Handles responses to an ajax request:\n  * - sets all responseXXX fields accordingly\n  * - finds the right dataType (mediates between content-type and expected dataType)\n  * - returns the corresponding response\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\t\tvar firstDataType,\n\t\t    ct,\n\t\t    finalDataType,\n\t\t    type,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes,\n\t\t    responseFields = s.responseFields;\n\n\t\t// Fill responseXXX fields\n\t\tfor (type in responseFields) {\n\t\t\tif (type in responses) {\n\t\t\t\tjqXHR[responseFields[type]] = responses[type];\n\t\t\t}\n\t\t}\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === "*") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we\'re dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t// Chain conversions given the request and the original response\n\tfunction ajaxConvert(s, response) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    converters = {},\n\t\t    i = 0,\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice(),\n\t\t    prev = dataTypes[0];\n\n\t\t// Apply the dataFilter if provided\n\t\tif (s.dataFilter) {\n\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t}\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\t// Convert to each sequential dataType, tolerating list modification\n\t\tfor (; current = dataTypes[++i];) {\n\n\t\t\t// There\'s only work to do if current dataType is non-auto\n\t\t\tif (current !== "*") {\n\n\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\tif (prev !== "*" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + " " + current] || converters["* " + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(" ");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.splice(i--, 0, current);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s["throws"]) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update prev for next iteration\n\t\t\t\tprev = current;\n\t\t\t}\n\t\t}\n\n\t\treturn { state: "success", data: response };\n\t}\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /(?:java|ecma)script/\n\t\t},\n\t\tconverters: {\n\t\t\t"text script": function (text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache\'s special case and global\n\tjQuery.ajaxPrefilter("script", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = "GET";\n\t\t\ts.global = false;\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport("script", function (s) {\n\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\n\t\t\tvar script,\n\t\t\t    head = document.head || jQuery("head")[0] || document.documentElement;\n\n\t\t\treturn {\n\n\t\t\t\tsend: function (_, callback) {\n\n\t\t\t\t\tscript = document.createElement("script");\n\n\t\t\t\t\tscript.async = true;\n\n\t\t\t\t\tif (s.scriptCharset) {\n\t\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t\t}\n\n\t\t\t\t\tscript.src = s.url;\n\n\t\t\t\t\t// Attach handlers for all browsers\n\t\t\t\t\tscript.onload = script.onreadystatechange = function (_, isAbort) {\n\n\t\t\t\t\t\tif (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n\n\t\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\t\tif (script.parentNode) {\n\t\t\t\t\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\t\tif (!isAbort) {\n\t\t\t\t\t\t\t\tcallback(200, "success");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n\t\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\t\thead.insertBefore(script, head.firstChild);\n\t\t\t\t},\n\n\t\t\t\tabort: function () {\n\t\t\t\t\tif (script) {\n\t\t\t\t\t\tscript.onload(undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: "callback",\n\t\tjsonpCallback: function () {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + "_" + ajax_nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");\n\n\t\t// Handle iff the expected data type is "jsonp" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === "jsonp") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters["script json"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + " was not called");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// force json dataType\n\t\t\ts.dataTypes[0] = "json";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\t\t\t\t// Restore preexisting value\n\t\t\t\twindow[callbackName] = overwritten;\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\t\t\t\t\t// make sure that re-using the options doesn\'t screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn "script";\n\t\t}\n\t});\n\tvar xhrCallbacks,\n\t    xhrSupported,\n\t    xhrId = 0,\n\n\t// #5280: Internet Explorer will keep connections alive if we don\'t abort on unload\n\txhrOnUnloadAbort = window.ActiveXObject && function () {\n\t\t// Abort all pending requests\n\t\tvar key;\n\t\tfor (key in xhrCallbacks) {\n\t\t\txhrCallbacks[key](undefined, true);\n\t\t}\n\t};\n\n\t// Functions to create xhrs\n\tfunction createStandardXHR() {\n\t\ttry {\n\t\t\treturn new window.XMLHttpRequest();\n\t\t} catch (e) {}\n\t}\n\n\tfunction createActiveXHR() {\n\t\ttry {\n\t\t\treturn new window.ActiveXObject("Microsoft.XMLHTTP");\n\t\t} catch (e) {}\n\t}\n\n\t// Create the request object\n\t// (This is still attached to ajaxSettings for backward compatibility)\n\tjQuery.ajaxSettings.xhr = window.ActiveXObject ?\n\t/* Microsoft failed to properly\n  * implement the XMLHttpRequest in IE7 (can\'t request local files),\n  * so we use the ActiveXObject when it is available\n  * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n  * we need a fallback.\n  */\n\tfunction () {\n\t\treturn !this.isLocal && createStandardXHR() || createActiveXHR();\n\t} :\n\t// For all other browsers, use the standard XMLHttpRequest object\n\tcreateStandardXHR;\n\n\t// Determine support properties\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\tjQuery.support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n\txhrSupported = jQuery.support.ajax = !!xhrSupported;\n\n\t// Create transport if the browser can provide an xhr\n\tif (xhrSupported) {\n\n\t\tjQuery.ajaxTransport(function (s) {\n\t\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\t\tif (!s.crossDomain || jQuery.support.cors) {\n\n\t\t\t\tvar callback;\n\n\t\t\t\treturn {\n\t\t\t\t\tsend: function (headers, complete) {\n\n\t\t\t\t\t\t// Get a new xhr\n\t\t\t\t\t\tvar handle,\n\t\t\t\t\t\t    i,\n\t\t\t\t\t\t    xhr = s.xhr();\n\n\t\t\t\t\t\t// Open the socket\n\t\t\t\t\t\t// Passing null username, generates a login popup on Opera (#2865)\n\t\t\t\t\t\tif (s.username) {\n\t\t\t\t\t\t\txhr.open(s.type, s.url, s.async, s.username, s.password);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\txhr.open(s.type, s.url, s.async);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\t\tif (s.xhrFields) {\n\t\t\t\t\t\t\tfor (i in s.xhrFields) {\n\t\t\t\t\t\t\t\txhr[i] = s.xhrFields[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\t\tif (s.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\t\txhr.overrideMimeType(s.mimeType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t\t// For same-domain requests, won\'t change header if already provided.\n\t\t\t\t\t\tif (!s.crossDomain && !headers["X-Requested-With"]) {\n\t\t\t\t\t\t\theaders["X-Requested-With"] = "XMLHttpRequest";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Need an extra try/catch for cross domain requests in Firefox 3\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (err) {}\n\n\t\t\t\t\t\t// Do send the request\n\t\t\t\t\t\t// This may raise an exception which is actually\n\t\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\t\txhr.send(s.hasContent && s.data || null);\n\n\t\t\t\t\t\t// Listener\n\t\t\t\t\t\tcallback = function (_, isAbort) {\n\t\t\t\t\t\t\tvar status, responseHeaders, statusText, responses;\n\n\t\t\t\t\t\t\t// Firefox throws exceptions when accessing properties\n\t\t\t\t\t\t\t// of an xhr when a network error occurred\n\t\t\t\t\t\t\t// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)\n\t\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t\t// Was never called and is aborted or complete\n\t\t\t\t\t\t\t\tif (callback && (isAbort || xhr.readyState === 4)) {\n\n\t\t\t\t\t\t\t\t\t// Only called once\n\t\t\t\t\t\t\t\t\tcallback = undefined;\n\n\t\t\t\t\t\t\t\t\t// Do not keep as active anymore\n\t\t\t\t\t\t\t\t\tif (handle) {\n\t\t\t\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\n\t\t\t\t\t\t\t\t\t\tif (xhrOnUnloadAbort) {\n\t\t\t\t\t\t\t\t\t\t\tdelete xhrCallbacks[handle];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// If it\'s an abort\n\t\t\t\t\t\t\t\t\tif (isAbort) {\n\t\t\t\t\t\t\t\t\t\t// Abort it manually if needed\n\t\t\t\t\t\t\t\t\t\tif (xhr.readyState !== 4) {\n\t\t\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresponses = {};\n\t\t\t\t\t\t\t\t\t\tstatus = xhr.status;\n\t\t\t\t\t\t\t\t\t\tresponseHeaders = xhr.getAllResponseHeaders();\n\n\t\t\t\t\t\t\t\t\t\t// When requesting binary data, IE6-9 will throw an exception\n\t\t\t\t\t\t\t\t\t\t// on any attempt to access responseText (#11426)\n\t\t\t\t\t\t\t\t\t\tif (typeof xhr.responseText === "string") {\n\t\t\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\n\t\t\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\n\t\t\t\t\t\t\t\t\t\t\tstatusText = "";\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\n\n\t\t\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\n\t\t\t\t\t\t\t\t\t\t// (success with no data won\'t get notified, that\'s the best we\n\t\t\t\t\t\t\t\t\t\t// can do given current implementations)\n\t\t\t\t\t\t\t\t\t\tif (!status && s.isLocal && !s.crossDomain) {\n\t\t\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\n\t\t\t\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\n\t\t\t\t\t\t\t\t\t\t} else if (status === 1223) {\n\t\t\t\t\t\t\t\t\t\t\tstatus = 204;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (firefoxAccessException) {\n\t\t\t\t\t\t\t\tif (!isAbort) {\n\t\t\t\t\t\t\t\t\tcomplete(-1, firefoxAccessException);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Call complete if needed\n\t\t\t\t\t\t\tif (responses) {\n\t\t\t\t\t\t\t\tcomplete(status, statusText, responses, responseHeaders);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!s.async) {\n\t\t\t\t\t\t\t// if we\'re in sync mode we fire the callback\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t} else if (xhr.readyState === 4) {\n\t\t\t\t\t\t\t// (IE6 & IE7) if it\'s in cache and has been\n\t\t\t\t\t\t\t// retrieved directly we need to fire the callback\n\t\t\t\t\t\t\tsetTimeout(callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thandle = ++xhrId;\n\t\t\t\t\t\t\tif (xhrOnUnloadAbort) {\n\t\t\t\t\t\t\t\t// Create the active xhrs callbacks list if needed\n\t\t\t\t\t\t\t\t// and attach the unload handler\n\t\t\t\t\t\t\t\tif (!xhrCallbacks) {\n\t\t\t\t\t\t\t\t\txhrCallbacks = {};\n\t\t\t\t\t\t\t\t\tjQuery(window).unload(xhrOnUnloadAbort);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Add to list of active xhrs callbacks\n\t\t\t\t\t\t\t\txhrCallbacks[handle] = callback;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\txhr.onreadystatechange = callback;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tabort: function () {\n\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\tcallback(undefined, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\tvar fxNow,\n\t    timerId,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"),\n\t    rrun = /queueHooks$/,\n\t    animationPrefilters = [defaultPrefilter],\n\t    tweeners = {\n\t\t"*": [function (prop, value) {\n\t\t\tvar end,\n\t\t\t    unit,\n\t\t\t    tween = this.createTween(prop, value),\n\t\t\t    parts = rfxnum.exec(value),\n\t\t\t    target = tween.cur(),\n\t\t\t    start = +target || 0,\n\t\t\t    scale = 1,\n\t\t\t    maxIterations = 20;\n\n\t\t\tif (parts) {\n\t\t\t\tend = +parts[2];\n\t\t\t\tunit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");\n\n\t\t\t\t// We need to compute starting value\n\t\t\t\tif (unit !== "px" && start) {\n\t\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\t\t// Prefer the current property, because this process will be trivial if it uses the same units\n\t\t\t\t\t// Fallback to end or a simple constant\n\t\t\t\t\tstart = jQuery.css(tween.elem, prop, true) || end || 1;\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*\n\t\t\t\t\t\t// Use a string for doubling factor so we don\'t accidentally see scale as unchanged below\n\t\t\t\t\t\tscale = scale || ".5";\n\n\t\t\t\t\t\t// Adjust and apply\n\t\t\t\t\t\tstart = start / scale;\n\t\t\t\t\t\tjQuery.style(tween.elem, prop, start + unit);\n\n\t\t\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we\'ve just had enough\n\t\t\t\t\t} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n\t\t\t\t}\n\n\t\t\t\ttween.unit = unit;\n\t\t\t\ttween.start = start;\n\t\t\t\t// If a +=/-= token was provided, we\'re doing a relative animation\n\t\t\t\ttween.end = parts[1] ? start + (parts[1] + 1) * end : end;\n\t\t\t}\n\t\t\treturn tween;\n\t\t}]\n\t};\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\tsetTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\tfunction createTweens(animation, props) {\n\t\tjQuery.each(props, function (prop, value) {\n\t\t\tvar collection = (tweeners[prop] || []).concat(tweeners["*"]),\n\t\t\t    index = 0,\n\t\t\t    length = collection.length;\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tif (collection[index].call(animation, prop, value)) {\n\n\t\t\t\t\t// we\'re done with this property\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = animationPrefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\t\t\t// don\'t match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function () {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\t\t\t// archaic crash bug won\'t allow us to use 1 - ( 0.5 || 0 ) (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, { specialEasing: {} }, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function (prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function (gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t// if we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// resolve when we played the last frame\n\t\t\t\t// otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tcreateTweens(animation, props);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\t// attach callbacks from options\n\t\treturn animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar value, name, index, easing, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && "expand" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// not quite $.extend, this wont overwrite keys already present.\n\t\t\t\t// also - reusing \'index\' from above because we have the correct "name"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\n\t\ttweener: function (props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = ["*"];\n\t\t\t} else {\n\t\t\t\tprops = props.split(" ");\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\ttweeners[prop] = tweeners[prop] || [];\n\t\t\t\ttweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilter: function (callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tanimationPrefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tanimationPrefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\t/*jshint validthis:true */\n\t\tvar prop,\n\t\t    index,\n\t\t    length,\n\t\t    value,\n\t\t    dataShow,\n\t\t    toggle,\n\t\t    tween,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    anim = this,\n\t\t    style = elem.style,\n\t\t    orig = {},\n\t\t    handled = [],\n\t\t    hidden = elem.nodeType && isHidden(elem);\n\n\t\t// handle queue: false promises\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, "fx");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\t\t\t\t// doing this makes sure that the complete handler will be called\n\t\t\t\t// before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, "fx").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// height/width overflow pass\n\t\tif (elem.nodeType === 1 && ("height" in props || "width" in props)) {\n\t\t\t// Make sure that nothing sneaks out\n\t\t\t// Record all 3 overflow attributes because IE does not\n\t\t\t// change the overflow attribute when overflowX and\n\t\t\t// overflowY are set to the same value\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Set display property to inline-block for height/width\n\t\t\t// animations on inline elements that are having width/height animated\n\t\t\tif (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {\n\n\t\t\t\t// inline-level elements accept inline-block;\n\t\t\t\t// block-level elements need to be inline with layout\n\t\t\t\tif (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {\n\t\t\t\t\tstyle.display = "inline-block";\n\t\t\t\t} else {\n\t\t\t\t\tstyle.zoom = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = "hidden";\n\t\t\tif (!jQuery.support.shrinkWrapBlocks) {\n\t\t\t\tanim.always(function () {\n\t\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// show/hide pass\n\t\tfor (index in props) {\n\t\t\tvalue = props[index];\n\t\t\tif (rfxtypes.exec(value)) {\n\t\t\t\tdelete props[index];\n\t\t\t\ttoggle = toggle || value === "toggle";\n\t\t\t\tif (value === (hidden ? "hide" : "show")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\thandled.push(index);\n\t\t\t}\n\t\t}\n\n\t\tlength = handled.length;\n\t\tif (length) {\n\t\t\tdataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});\n\t\t\tif ("hidden" in dataShow) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\n\t\t\t// store state if its toggle - enables .stop().toggle() to "reverse"\n\t\t\tif (toggle) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\t\t\tif (hidden) {\n\t\t\t\tjQuery(elem).show();\n\t\t\t} else {\n\t\t\t\tanim.done(function () {\n\t\t\t\t\tjQuery(elem).hide();\n\t\t\t\t});\n\t\t\t}\n\t\t\tanim.done(function () {\n\t\t\t\tvar prop;\n\t\t\t\tjQuery._removeData(elem, "fxshow");\n\t\t\t\tfor (prop in orig) {\n\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\tprop = handled[index];\n\t\t\t\ttween = anim.createTween(prop, hidden ? dataShow[prop] : 0);\n\t\t\t\torig[prop] = dataShow[prop] || jQuery.style(elem, prop);\n\n\t\t\t\tif (!(prop in dataShow)) {\n\t\t\t\t\tdataShow[prop] = tween.start;\n\t\t\t\t\tif (hidden) {\n\t\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\t\ttween.start = prop === "width" || prop === "height" ? 1 : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function (elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || "swing";\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n\t\t},\n\t\tcur: function () {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function (percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function (tween) {\n\t\t\t\tvar result;\n\n\t\t\t\tif (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\n\t\t\t\t// so, simple values such as "10px" are parsed to Float.\n\t\t\t\t// complex values such as "rotate(1rad)" are returned as is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, "");\n\t\t\t\t// Empty strings, null, undefined and "auto" are converted to 0.\n\t\t\t\treturn !result || result === "auto" ? 0 : result;\n\t\t\t},\n\t\t\tset: function (tween) {\n\t\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\n\t\t\t\t// available and use plain properties where available\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Remove in 2.0 - this supports IE8\'s panic based approach\n\t// to setting things on disconnected nodes\n\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function (tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.each(["toggle", "show", "hide"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function (speed, to, easing, callback) {\n\n\t\t\t// show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHidden).css("opacity", 0).show()\n\n\t\t\t// animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function (prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function () {\n\t\t\t\t// Operate on a copy of prop so per-property easing won\'t be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\t\t\t\tdoAnimation.finish = function () {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t};\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || jQuery._data(this, "finish")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function (type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function (hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== "string") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || "fx", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + "queueHooks",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = jQuery._data(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// start the next in the queue if the last step wasn\'t forced\n\t\t\t\t// timers currently will call their complete callbacks, which will dequeue\n\t\t\t\t// but only if they were gotoEnd\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function (type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || "fx";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = jQuery._data(this),\n\t\t\t\t    queue = data[type + "queue"],\n\t\t\t\t    hooks = data[type + "queueHooks"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.cur && hooks.cur.finish) {\n\t\t\t\t\thooks.cur.finish.call(this);\n\t\t\t\t}\n\n\t\t\t\t// look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    attrs = { height: type },\n\t\t    i = 0;\n\n\t\t// if we include width, step value is 1 to do all cssExpand values,\n\t\t// if we don\'t include width, step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs["margin" + which] = attrs["padding" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx("show"),\n\t\tslideUp: genFx("hide"),\n\t\tslideToggle: genFx("toggle"),\n\t\tfadeIn: { opacity: "show" },\n\t\tfadeOut: { opacity: "hide" },\n\t\tfadeToggle: { opacity: "toggle" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\n\n\t\t// normalize opt.queue - true/undefined/null -> "fx"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = "fx";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function (p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function (p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t}\n\t};\n\n\tjQuery.timers = [];\n\tjQuery.fx = Tween.prototype.init;\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    timers = jQuery.timers,\n\t\t    i = 0;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\t\t\t// Checks the timer has not already been removed\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tif (timer() && jQuery.timers.push(timer)) {\n\t\t\tjQuery.fx.start();\n\t\t}\n\t};\n\n\tjQuery.fx.interval = 13;\n\n\tjQuery.fx.start = function () {\n\t\tif (!timerId) {\n\t\t\ttimerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n\t\t}\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tclearInterval(timerId);\n\t\ttimerId = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Back Compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tif (jQuery.expr && jQuery.expr.filters) {\n\t\tjQuery.expr.filters.animated = function (elem) {\n\t\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\t\treturn elem === fn.elem;\n\t\t\t}).length;\n\t\t};\n\t}\n\tjQuery.fn.offset = function (options) {\n\t\tif (arguments.length) {\n\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t});\n\t\t}\n\n\t\tvar docElem,\n\t\t    win,\n\t\t    box = { top: 0, left: 0 },\n\t\t    elem = this[0],\n\t\t    doc = elem && elem.ownerDocument;\n\n\t\tif (!doc) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it\'s not a disconnected DOM node\n\t\tif (!jQuery.contains(docElem, elem)) {\n\t\t\treturn box;\n\t\t}\n\n\t\t// If we don\'t have gBCR, just use 0,0 rather than error\n\t\t// BlackBerry 5, iOS 3 (original iPhone)\n\t\tif (typeof elem.getBoundingClientRect !== core_strundefined) {\n\t\t\tbox = elem.getBoundingClientRect();\n\t\t}\n\t\twin = getWindow(doc);\n\t\treturn {\n\t\t\ttop: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n\t\t\tleft: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n\t\t};\n\t};\n\n\tjQuery.offset = {\n\n\t\tsetOffset: function (elem, options, i) {\n\t\t\tvar position = jQuery.css(elem, "position");\n\n\t\t\t// set position first, in-case top/left are set even on static elem\n\t\t\tif (position === "static") {\n\t\t\t\telem.style.position = "relative";\n\t\t\t}\n\n\t\t\tvar curElem = jQuery(elem),\n\t\t\t    curOffset = curElem.offset(),\n\t\t\t    curCSSTop = jQuery.css(elem, "top"),\n\t\t\t    curCSSLeft = jQuery.css(elem, "left"),\n\t\t\t    calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,\n\t\t\t    props = {},\n\t\t\t    curPosition = {},\n\t\t\t    curTop,\n\t\t\t    curLeft;\n\n\t\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\t\t\t\toptions = options.call(elem, i, curOffset);\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif ("using" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\n\t\tposition: function () {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    parentOffset = { top: 0, left: 0 },\n\t\t\t    elem = this[0];\n\n\t\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it\'s only offset parent\n\t\t\tif (jQuery.css(elem, "position") === "fixed") {\n\t\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!jQuery.nodeName(offsetParent[0], "html")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);\n\t\t\t\tparentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\n\t\t\t// are the same in Safari causing offset.left to incorrectly be 0\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n\t\t\t};\n\t\t},\n\n\t\toffsetParent: function () {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent || document.documentElement;\n\t\t\t\twhile (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\t\t\t\treturn offsetParent || document.documentElement;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {\n\t\tvar top = /Y/.test(prop);\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn jQuery.access(this, function (elem, method, val) {\n\t\t\t\tvar win = getWindow(elem);\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length, null);\n\t\t};\n\t});\n\n\tfunction getWindow(elem) {\n\t\treturn jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n\t}\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: "height", Width: "width" }, function (name, type) {\n\t\tjQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {\n\t\t\t// margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n\n\t\t\t\treturn jQuery.access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\t\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t\t// isn\'t a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\t\treturn elem.document.documentElement["client" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n\t\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n\t\t\t\t\t\treturn Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable, null);\n\t\t\t};\n\t\t});\n\t});\n\t// Limit scope pollution from any deprecated API\n\t// (function() {\n\n\t// })();\n\t// Expose jQuery to the global object\n\twindow.jQuery = window.$ = jQuery;\n\n\t// Expose jQuery as an AMD module, but only for AMD loaders that\n\t// understand the issues with loading multiple versions of jQuery\n\t// in a page that all might call define(). The loader will indicate\n\t// they have special allowances for multiple jQuery versions by\n\t// specifying define.amd.jQuery = true. Register as a named module,\n\t// since jQuery can be concatenated with other files that may use define,\n\t// but not use a proper concatenation script that understands anonymous\n\t// AMD modules. A named AMD is safest and most robust way to register.\n\t// Lowercase jquery is used because AMD module names are derived from\n\t// file names, and jQuery is normally delivered in a lowercase file name.\n\t// Do this after creating the global so that if an AMD module wants to call\n\t// noConflict to hide this version of jQuery, it will work.\n\tif ("function" === "function" && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js").jQuery) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn jQuery;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n})(window);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/jquery.min.js\n')}},[["./app/vendor.js","manifest","common"]]]);